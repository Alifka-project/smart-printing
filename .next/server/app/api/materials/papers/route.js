/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/materials/papers/route";
exports.ids = ["app/api/materials/papers/route"];
exports.modules = {

/***/ "(rsc)/./app/api/materials/papers/route.ts":
/*!*******************************************!*\
  !*** ./app/api/materials/papers/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database */ \"(rsc)/./lib/database.ts\");\n\n\nasync function GET(request) {\n    try {\n        // Get all active materials that represent papers\n        const materials = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.DatabaseService.getAllMaterials();\n        if (!materials || materials.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json([]);\n        }\n        // Filter for active materials and extract unique paper types\n        const activeMaterials = materials.filter((material)=>material.status === 'Active');\n        // Group by paper name and collect available GSM values\n        const paperTypes = activeMaterials.reduce((acc, material)=>{\n            const paperName = material.name;\n            if (!acc[paperName]) {\n                acc[paperName] = {\n                    name: paperName,\n                    gsmOptions: [],\n                    suppliers: []\n                };\n            }\n            // Add GSM option if not already present\n            if (material.gsm && !acc[paperName].gsmOptions.includes(material.gsm)) {\n                acc[paperName].gsmOptions.push(material.gsm);\n            }\n            // Add supplier if not already present\n            if (material.supplier && !acc[paperName].suppliers.includes(material.supplier.name)) {\n                acc[paperName].suppliers.push(material.supplier.name);\n            }\n            return acc;\n        }, {});\n        // Convert to array format and sort\n        const papersList = Object.values(paperTypes).map((paper)=>({\n                name: paper.name,\n                gsmOptions: paper.gsmOptions.sort((a, b)=>parseInt(a) - parseInt(b)),\n                suppliers: paper.suppliers\n            }));\n        // Sort by paper name\n        papersList.sort((a, b)=>a.name.localeCompare(b.name));\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(papersList);\n    } catch (error) {\n        console.error('Error fetching paper materials:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to fetch paper materials'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL21hdGVyaWFscy9wYXBlcnMvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQ1A7QUFFMUMsZUFBZUUsSUFBSUMsT0FBb0I7SUFDNUMsSUFBSTtRQUNGLGlEQUFpRDtRQUNqRCxNQUFNQyxZQUFZLE1BQU1ILDBEQUFlQSxDQUFDSSxlQUFlO1FBRXZELElBQUksQ0FBQ0QsYUFBYUEsVUFBVUUsTUFBTSxLQUFLLEdBQUc7WUFDeEMsT0FBT04scURBQVlBLENBQUNPLElBQUksQ0FBQyxFQUFFO1FBQzdCO1FBRUEsNkRBQTZEO1FBQzdELE1BQU1DLGtCQUFrQkosVUFBVUssTUFBTSxDQUFDQyxDQUFBQSxXQUFZQSxTQUFTQyxNQUFNLEtBQUs7UUFFekUsdURBQXVEO1FBQ3ZELE1BQU1DLGFBQWFKLGdCQUFnQkssTUFBTSxDQUFDLENBQUNDLEtBQVVKO1lBQ25ELE1BQU1LLFlBQVlMLFNBQVNNLElBQUk7WUFFL0IsSUFBSSxDQUFDRixHQUFHLENBQUNDLFVBQVUsRUFBRTtnQkFDbkJELEdBQUcsQ0FBQ0MsVUFBVSxHQUFHO29CQUNmQyxNQUFNRDtvQkFDTkUsWUFBWSxFQUFFO29CQUNkQyxXQUFXLEVBQUU7Z0JBQ2Y7WUFDRjtZQUVBLHdDQUF3QztZQUN4QyxJQUFJUixTQUFTUyxHQUFHLElBQUksQ0FBQ0wsR0FBRyxDQUFDQyxVQUFVLENBQUNFLFVBQVUsQ0FBQ0csUUFBUSxDQUFDVixTQUFTUyxHQUFHLEdBQUc7Z0JBQ3JFTCxHQUFHLENBQUNDLFVBQVUsQ0FBQ0UsVUFBVSxDQUFDSSxJQUFJLENBQUNYLFNBQVNTLEdBQUc7WUFDN0M7WUFFQSxzQ0FBc0M7WUFDdEMsSUFBSVQsU0FBU1ksUUFBUSxJQUFJLENBQUNSLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDRyxTQUFTLENBQUNFLFFBQVEsQ0FBQ1YsU0FBU1ksUUFBUSxDQUFDTixJQUFJLEdBQUc7Z0JBQ25GRixHQUFHLENBQUNDLFVBQVUsQ0FBQ0csU0FBUyxDQUFDRyxJQUFJLENBQUNYLFNBQVNZLFFBQVEsQ0FBQ04sSUFBSTtZQUN0RDtZQUVBLE9BQU9GO1FBQ1QsR0FBRyxDQUFDO1FBRUosbUNBQW1DO1FBQ25DLE1BQU1TLGFBQWFDLE9BQU9DLE1BQU0sQ0FBQ2IsWUFBWWMsR0FBRyxDQUFDLENBQUNDLFFBQWdCO2dCQUNoRVgsTUFBTVcsTUFBTVgsSUFBSTtnQkFDaEJDLFlBQVlVLE1BQU1WLFVBQVUsQ0FBQ1csSUFBSSxDQUFDLENBQUNDLEdBQVdDLElBQWNDLFNBQVNGLEtBQUtFLFNBQVNEO2dCQUNuRlosV0FBV1MsTUFBTVQsU0FBUztZQUM1QjtRQUVBLHFCQUFxQjtRQUNyQkssV0FBV0ssSUFBSSxDQUFDLENBQUNDLEdBQVFDLElBQVdELEVBQUViLElBQUksQ0FBQ2dCLGFBQWEsQ0FBQ0YsRUFBRWQsSUFBSTtRQUUvRCxPQUFPaEIscURBQVlBLENBQUNPLElBQUksQ0FBQ2dCO0lBQzNCLEVBQUUsT0FBT1UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsbUNBQW1DQTtRQUNqRCxPQUFPakMscURBQVlBLENBQUNPLElBQUksQ0FDdEI7WUFBRTBCLE9BQU87UUFBa0MsR0FDM0M7WUFBRXRCLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvQWxpZmthX1Jvb3NzZW8vRGVza3RvcC9Qcm9qZWN0L1NtYXJ0LXByaW50aW5nLXVwZGF0ZS9hcHAvYXBpL21hdGVyaWFscy9wYXBlcnMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IERhdGFiYXNlU2VydmljZSB9IGZyb20gJ0AvbGliL2RhdGFiYXNlJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIC8vIEdldCBhbGwgYWN0aXZlIG1hdGVyaWFscyB0aGF0IHJlcHJlc2VudCBwYXBlcnNcbiAgICBjb25zdCBtYXRlcmlhbHMgPSBhd2FpdCBEYXRhYmFzZVNlcnZpY2UuZ2V0QWxsTWF0ZXJpYWxzKCk7XG4gICAgXG4gICAgaWYgKCFtYXRlcmlhbHMgfHwgbWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFtdKTtcbiAgICB9XG5cbiAgICAvLyBGaWx0ZXIgZm9yIGFjdGl2ZSBtYXRlcmlhbHMgYW5kIGV4dHJhY3QgdW5pcXVlIHBhcGVyIHR5cGVzXG4gICAgY29uc3QgYWN0aXZlTWF0ZXJpYWxzID0gbWF0ZXJpYWxzLmZpbHRlcihtYXRlcmlhbCA9PiBtYXRlcmlhbC5zdGF0dXMgPT09ICdBY3RpdmUnKTtcbiAgICBcbiAgICAvLyBHcm91cCBieSBwYXBlciBuYW1lIGFuZCBjb2xsZWN0IGF2YWlsYWJsZSBHU00gdmFsdWVzXG4gICAgY29uc3QgcGFwZXJUeXBlcyA9IGFjdGl2ZU1hdGVyaWFscy5yZWR1Y2UoKGFjYzogYW55LCBtYXRlcmlhbCkgPT4ge1xuICAgICAgY29uc3QgcGFwZXJOYW1lID0gbWF0ZXJpYWwubmFtZTtcbiAgICAgIFxuICAgICAgaWYgKCFhY2NbcGFwZXJOYW1lXSkge1xuICAgICAgICBhY2NbcGFwZXJOYW1lXSA9IHtcbiAgICAgICAgICBuYW1lOiBwYXBlck5hbWUsXG4gICAgICAgICAgZ3NtT3B0aW9uczogW10sXG4gICAgICAgICAgc3VwcGxpZXJzOiBbXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBBZGQgR1NNIG9wdGlvbiBpZiBub3QgYWxyZWFkeSBwcmVzZW50XG4gICAgICBpZiAobWF0ZXJpYWwuZ3NtICYmICFhY2NbcGFwZXJOYW1lXS5nc21PcHRpb25zLmluY2x1ZGVzKG1hdGVyaWFsLmdzbSkpIHtcbiAgICAgICAgYWNjW3BhcGVyTmFtZV0uZ3NtT3B0aW9ucy5wdXNoKG1hdGVyaWFsLmdzbSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEFkZCBzdXBwbGllciBpZiBub3QgYWxyZWFkeSBwcmVzZW50XG4gICAgICBpZiAobWF0ZXJpYWwuc3VwcGxpZXIgJiYgIWFjY1twYXBlck5hbWVdLnN1cHBsaWVycy5pbmNsdWRlcyhtYXRlcmlhbC5zdXBwbGllci5uYW1lKSkge1xuICAgICAgICBhY2NbcGFwZXJOYW1lXS5zdXBwbGllcnMucHVzaChtYXRlcmlhbC5zdXBwbGllci5uYW1lKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG5cbiAgICAvLyBDb252ZXJ0IHRvIGFycmF5IGZvcm1hdCBhbmQgc29ydFxuICAgIGNvbnN0IHBhcGVyc0xpc3QgPSBPYmplY3QudmFsdWVzKHBhcGVyVHlwZXMpLm1hcCgocGFwZXI6IGFueSkgPT4gKHtcbiAgICAgIG5hbWU6IHBhcGVyLm5hbWUsXG4gICAgICBnc21PcHRpb25zOiBwYXBlci5nc21PcHRpb25zLnNvcnQoKGE6IHN0cmluZywgYjogc3RyaW5nKSA9PiBwYXJzZUludChhKSAtIHBhcnNlSW50KGIpKSxcbiAgICAgIHN1cHBsaWVyczogcGFwZXIuc3VwcGxpZXJzXG4gICAgfSkpO1xuXG4gICAgLy8gU29ydCBieSBwYXBlciBuYW1lXG4gICAgcGFwZXJzTGlzdC5zb3J0KChhOiBhbnksIGI6IGFueSkgPT4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocGFwZXJzTGlzdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcGFwZXIgbWF0ZXJpYWxzOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIHBhcGVyIG1hdGVyaWFscycgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJEYXRhYmFzZVNlcnZpY2UiLCJHRVQiLCJyZXF1ZXN0IiwibWF0ZXJpYWxzIiwiZ2V0QWxsTWF0ZXJpYWxzIiwibGVuZ3RoIiwianNvbiIsImFjdGl2ZU1hdGVyaWFscyIsImZpbHRlciIsIm1hdGVyaWFsIiwic3RhdHVzIiwicGFwZXJUeXBlcyIsInJlZHVjZSIsImFjYyIsInBhcGVyTmFtZSIsIm5hbWUiLCJnc21PcHRpb25zIiwic3VwcGxpZXJzIiwiZ3NtIiwiaW5jbHVkZXMiLCJwdXNoIiwic3VwcGxpZXIiLCJwYXBlcnNMaXN0IiwiT2JqZWN0IiwidmFsdWVzIiwibWFwIiwicGFwZXIiLCJzb3J0IiwiYSIsImIiLCJwYXJzZUludCIsImxvY2FsZUNvbXBhcmUiLCJlcnJvciIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/materials/papers/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService),\n/* harmony export */   \"default\": () => (/* binding */ prisma),\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\n// Create Prisma client with PostgreSQL configuration only\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        'query',\n        'error',\n        'warn'\n    ] : 0,\n    datasources: {\n        db: {\n            // Use DATABASE_URL for PostgreSQL/Prisma Accelerate only\n            url: process.env.DATABASE_URL\n        }\n    }\n});\n// Only create one instance in production\nif (false) {}\n// Database service class with unified interface\nclass DatabaseService {\n    // Helper method to check if database is available\n    static checkDatabase() {\n        if (!prisma) {\n            throw new Error('Database not available - DATABASE_URL not configured');\n        }\n        return prisma;\n    }\n    // Helper method to get database info\n    static getDatabaseInfo() {\n        return {\n            isProduction: \"development\" === 'production',\n            hasVercelDatabase: !!process.env.DATABASE_URL,\n            databaseUrl: 'PostgreSQL Only',\n            environment: \"development\" || 0\n        };\n    }\n    // Database connection health check\n    static async checkConnection() {\n        try {\n            const db = this.checkDatabase();\n            await db.$queryRaw`SELECT 1`;\n            return {\n                status: 'connected',\n                timestamp: new Date().toISOString(),\n                ...this.getDatabaseInfo()\n            };\n        } catch (error) {\n            console.error('Database connection failed:', error);\n            return {\n                status: 'failed',\n                error: error instanceof Error ? error.message : 'Unknown error',\n                timestamp: new Date().toISOString(),\n                ...this.getDatabaseInfo()\n            };\n        }\n    }\n    // Graceful shutdown\n    static async disconnect() {\n        if (prisma) {\n            try {\n                await prisma.$disconnect();\n                console.log('Database connection closed gracefully');\n            } catch (error) {\n                console.error('Error closing database connection:', error);\n            }\n        }\n    }\n    // User operations\n    static async createUser(userData) {\n        const db = this.checkDatabase();\n        return await db.user.create({\n            data: userData\n        });\n    }\n    static async getUserByEmail(email) {\n        const db = this.checkDatabase();\n        return await db.user.findUnique({\n            where: {\n                email\n            }\n        });\n    }\n    static async getUserById(id) {\n        const db = this.checkDatabase();\n        return await db.user.findUnique({\n            where: {\n                id\n            },\n            include: {\n                quotes: true,\n                clients: true\n            }\n        });\n    }\n    static async updateUser(id, data) {\n        const db = this.checkDatabase();\n        return await db.user.update({\n            where: {\n                id\n            },\n            data\n        });\n    }\n    static async deleteUser(id) {\n        const db = this.checkDatabase();\n        return await db.user.delete({\n            where: {\n                id\n            }\n        });\n    }\n    static async getAllUsers() {\n        const db = this.checkDatabase();\n        return await db.user.findMany({\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n    }\n    // Client operations\n    static async createClient(clientData) {\n        const db = this.checkDatabase();\n        try {\n            return await db.client.create({\n                data: clientData\n            });\n        } catch (error) {\n            console.error('Error creating client:', error);\n            throw error;\n        }\n    }\n    static async getClientById(id) {\n        const db = this.checkDatabase();\n        return await db.client.findUnique({\n            where: {\n                id\n            },\n            include: {\n                user: true,\n                quotes: true\n            }\n        });\n    }\n    static async updateClient(id, data) {\n        const db = this.checkDatabase();\n        return await db.client.update({\n            where: {\n                id\n            },\n            data\n        });\n    }\n    static async deleteClient(id) {\n        const db = this.checkDatabase();\n        return await db.client.delete({\n            where: {\n                id\n            }\n        });\n    }\n    static async getAllClients() {\n        const db = this.checkDatabase();\n        return await db.client.findMany({\n            orderBy: {\n                createdAt: 'desc'\n            },\n            include: {\n                user: true\n            }\n        });\n    }\n    // Quote operations\n    static async createQuote(quoteData) {\n        const db = this.checkDatabase();\n        // Extract related data before creating quote\n        const amounts = quoteData.amounts;\n        const papers = quoteData.papers;\n        const finishing = quoteData.finishing;\n        const operational = quoteData.operational;\n        // Remove related data from quote data to avoid Prisma errors\n        delete quoteData.amounts;\n        delete quoteData.papers;\n        delete quoteData.finishing;\n        delete quoteData.operational;\n        // Create the quote\n        const quote = await db.quote.create({\n            data: quoteData,\n            include: {\n                client: true,\n                user: true,\n                amounts: true,\n                operational: true,\n                papers: true,\n                finishing: true\n            }\n        });\n        // Create amounts if provided\n        if (amounts) {\n            await db.quoteAmount.create({\n                data: {\n                    base: amounts.base || 0,\n                    vat: amounts.vat || 0,\n                    total: amounts.total || 0,\n                    quoteId: quote.id\n                }\n            });\n        }\n        // Create papers if provided\n        if (papers && papers.length > 0) {\n            for (const paper of papers){\n                await db.paper.create({\n                    data: {\n                        name: paper.name || 'Standard Paper',\n                        gsm: paper.gsm || 80,\n                        quoteId: quote.id,\n                        inputWidth: paper.inputWidth,\n                        inputHeight: paper.inputHeight,\n                        pricePerPacket: paper.pricePerPacket,\n                        pricePerSheet: paper.pricePerSheet,\n                        sheetsPerPacket: paper.sheetsPerPacket,\n                        recommendedSheets: paper.recommendedSheets,\n                        enteredSheets: paper.enteredSheets,\n                        outputWidth: paper.outputWidth,\n                        outputHeight: paper.outputHeight,\n                        selectedColors: paper.selectedColors\n                    }\n                });\n            }\n        }\n        // Create finishing options if provided\n        if (finishing && finishing.length > 0) {\n            for (const finish of finishing){\n                await db.finishing.create({\n                    data: {\n                        name: finish.name || 'Standard Finishing',\n                        cost: finish.cost || 0,\n                        quoteId: quote.id\n                    }\n                });\n            }\n        }\n        // Create operational data if provided\n        if (operational) {\n            await db.quoteOperational.create({\n                data: {\n                    plates: operational.plates || 0,\n                    units: operational.units || 0,\n                    quoteId: quote.id\n                }\n            });\n        }\n        // Fetch the updated quote with all related data\n        return await db.quote.findUnique({\n            where: {\n                id: quote.id\n            },\n            include: {\n                client: true,\n                user: true,\n                amounts: true,\n                operational: true,\n                papers: true,\n                finishing: true\n            }\n        });\n    }\n    // Enhanced quote creation with all related data\n    static async createQuoteWithDetails(quoteData) {\n        const db = this.checkDatabase();\n        return await db.$transaction(async (tx)=>{\n            // Create the main quote using the same approach as createQuote\n            const createdQuote = await tx.quote.create({\n                data: quoteData,\n                include: {\n                    client: true,\n                    user: true,\n                    amounts: true,\n                    papers: true,\n                    finishing: true,\n                    operational: true\n                }\n            });\n            // Create quote amounts if provided\n            if (quoteData.amounts) {\n                await tx.quoteAmount.create({\n                    data: {\n                        base: quoteData.amounts.base || 0,\n                        vat: quoteData.amounts.vat || 0,\n                        total: quoteData.amounts.total || 0,\n                        quoteId: createdQuote.id\n                    }\n                });\n            }\n            // Create papers if provided\n            if (quoteData.papers && quoteData.papers.length > 0) {\n                for (const paper of quoteData.papers){\n                    await tx.paper.create({\n                        data: {\n                            name: paper.name || 'Standard Paper',\n                            gsm: paper.gsm || 80,\n                            quoteId: createdQuote.id,\n                            inputWidth: paper.inputWidth,\n                            inputHeight: paper.inputHeight,\n                            pricePerPacket: paper.pricePerPacket,\n                            pricePerSheet: paper.pricePerSheet,\n                            sheetsPerPacket: paper.sheetsPerPacket,\n                            recommendedSheets: paper.recommendedSheets,\n                            enteredSheets: paper.enteredSheets,\n                            outputWidth: paper.outputWidth,\n                            outputHeight: paper.outputHeight,\n                            selectedColors: paper.selectedColors\n                        }\n                    });\n                }\n            }\n            // Create finishing options if provided\n            if (quoteData.finishing && quoteData.finishing.length > 0) {\n                for (const finish of quoteData.finishing){\n                    await tx.finishing.create({\n                        data: {\n                            name: finish.name || 'Standard Finishing',\n                            cost: finish.cost || 0,\n                            quoteId: createdQuote.id\n                        }\n                    });\n                }\n            }\n            // Create operational data if provided\n            if (quoteData.operational) {\n                await tx.quoteOperational.create({\n                    data: {\n                        plates: quoteData.operational.plates || 0,\n                        units: quoteData.operational.units || 0,\n                        quoteId: createdQuote.id\n                    }\n                });\n            }\n            // Create additional costs if provided\n            if (quoteData.additionalCosts && quoteData.additionalCosts.length > 0) {\n                for (const additionalCost of quoteData.additionalCosts){\n                    await tx.additionalCost.create({\n                        data: {\n                            description: additionalCost.description || '',\n                            cost: additionalCost.cost || 0,\n                            comment: additionalCost.comment || '',\n                            quoteId: createdQuote.id\n                        }\n                    });\n                }\n            }\n            return createdQuote;\n        });\n    }\n    static async getQuoteById(id) {\n        const db = this.checkDatabase();\n        return await db.quote.findUnique({\n            where: {\n                id\n            },\n            include: {\n                client: true,\n                user: true,\n                amounts: true,\n                // operational: true, // Removed due to linter errors\n                papers: true,\n                finishing: true,\n                additionalCosts: true\n            }\n        });\n    }\n    static async updateQuote(id, data) {\n        const db = this.checkDatabase();\n        return await db.quote.update({\n            where: {\n                id\n            },\n            data,\n            include: {\n                client: true,\n                user: true,\n                amounts: true,\n                // operational: true, // Removed due to linter errors\n                papers: true,\n                finishing: true,\n                additionalCosts: true\n            }\n        });\n    }\n    static async updateQuoteWithDetails(id, data) {\n        const db = this.checkDatabase();\n        try {\n            // Extract related data\n            const { amounts, papers, finishing, operational, additionalCosts, ...quoteData } = data;\n            // Start a transaction\n            const result = await db.$transaction(async (tx)=>{\n                // Update the main quote\n                const updatedQuote = await tx.quote.update({\n                    where: {\n                        id\n                    },\n                    data: quoteData\n                });\n                // Update amounts if provided\n                if (amounts) {\n                    // Check if amounts exist\n                    const existingAmounts = await tx.quoteAmount.findMany({\n                        where: {\n                            quoteId: id\n                        }\n                    });\n                    if (existingAmounts.length > 0) {\n                        // Update existing amounts\n                        for (const amount of existingAmounts){\n                            await tx.quoteAmount.update({\n                                where: {\n                                    id: amount.id\n                                },\n                                data: {\n                                    base: amounts.base || 0,\n                                    vat: amounts.vat || 0,\n                                    total: amounts.total || 0\n                                }\n                            });\n                        }\n                    } else {\n                        // Create new amounts\n                        await tx.quoteAmount.create({\n                            data: {\n                                quoteId: id,\n                                base: amounts.base || 0,\n                                vat: amounts.vat || 0,\n                                total: amounts.total || 0\n                            }\n                        });\n                    }\n                }\n                // Update papers if provided\n                if (papers && Array.isArray(papers)) {\n                    // Delete existing papers\n                    await tx.paper.deleteMany({\n                        where: {\n                            quoteId: id\n                        }\n                    });\n                    // Create new papers\n                    for (const paper of papers){\n                        await tx.paper.create({\n                            data: {\n                                quoteId: id,\n                                name: paper.name || \"Standard Paper\",\n                                gsm: paper.gsm ? Number(paper.gsm) : 150,\n                                inputWidth: paper.inputWidth ? Number(paper.inputWidth) : null,\n                                inputHeight: paper.inputHeight ? Number(paper.inputHeight) : null,\n                                pricePerPacket: paper.pricePerPacket ? Number(paper.pricePerPacket) : null,\n                                pricePerSheet: paper.pricePerSheet ? Number(paper.pricePerSheet) : null,\n                                sheetsPerPacket: paper.sheetsPerPacket ? Number(paper.sheetsPerPacket) : null,\n                                recommendedSheets: paper.recommendedSheets ? Number(paper.recommendedSheets) : null,\n                                enteredSheets: paper.enteredSheets ? Number(paper.enteredSheets) : null,\n                                outputWidth: paper.outputWidth ? Number(paper.outputWidth) : null,\n                                outputHeight: paper.outputHeight ? Number(paper.outputHeight) : null,\n                                selectedColors: paper.selectedColors ? String(paper.selectedColors) : null\n                            }\n                        });\n                    }\n                }\n                // Update finishing if provided\n                if (finishing && Array.isArray(finishing)) {\n                    // Delete existing finishing\n                    await tx.finishing.deleteMany({\n                        where: {\n                            quoteId: id\n                        }\n                    });\n                    // Create new finishing\n                    for (const finish of finishing){\n                        await tx.finishing.create({\n                            data: {\n                                quoteId: id,\n                                name: finish.name || \"Standard Finishing\",\n                                cost: finish.cost ? Number(finish.cost) : 0\n                            }\n                        });\n                    }\n                }\n                // Update operational if provided\n                if (operational) {\n                    // Check if operational exists\n                    const existingOperational = await tx.quoteOperational.findFirst({\n                        where: {\n                            quoteId: id\n                        }\n                    });\n                    if (existingOperational) {\n                        // Update existing operational\n                        await tx.quoteOperational.update({\n                            where: {\n                                id: existingOperational.id\n                            },\n                            data: {\n                                plates: operational.plates ? Number(operational.plates) : null,\n                                units: operational.units ? Number(operational.units) : null,\n                                updatedAt: new Date()\n                            }\n                        });\n                    } else {\n                        // Create new operational\n                        await tx.quoteOperational.create({\n                            data: {\n                                quoteId: id,\n                                plates: operational.plates ? Number(operational.plates) : null,\n                                units: operational.units ? Number(operational.units) : null,\n                                createdAt: new Date(),\n                                updatedAt: new Date()\n                            }\n                        });\n                    }\n                }\n                // Update additional costs if provided\n                if (additionalCosts && Array.isArray(additionalCosts)) {\n                    // Delete existing additional costs\n                    await tx.additionalCost.deleteMany({\n                        where: {\n                            quoteId: id\n                        }\n                    });\n                    // Create new additional costs\n                    for (const additionalCost of additionalCosts){\n                        await tx.additionalCost.create({\n                            data: {\n                                quoteId: id,\n                                description: additionalCost.description || '',\n                                cost: additionalCost.cost ? Number(additionalCost.cost) : 0,\n                                comment: additionalCost.comment || ''\n                            }\n                        });\n                    }\n                }\n                // Return the updated quote with all related data\n                return await tx.quote.findUnique({\n                    where: {\n                        id\n                    },\n                    include: {\n                        client: true,\n                        user: true,\n                        amounts: true,\n                        operational: true,\n                        papers: true,\n                        finishing: true,\n                        additionalCosts: true\n                    }\n                });\n            });\n            return result;\n        } catch (error) {\n            console.error('Error updating quote with details:', error);\n            throw error;\n        }\n    }\n    static async deleteQuote(id) {\n        const db = this.checkDatabase();\n        return await db.quote.delete({\n            where: {\n                id\n            }\n        });\n    }\n    static async getAllQuotes() {\n        const db = this.checkDatabase();\n        return await db.quote.findMany({\n            orderBy: {\n                createdAt: 'desc'\n            },\n            include: {\n                client: true,\n                user: true,\n                amounts: true,\n                QuoteOperational: true\n            }\n        });\n    }\n    // Sales Person operations - using raw queries for now since the model might not be in schema yet\n    static async createSalesPerson(salesPersonData) {\n        const db = this.checkDatabase();\n        // Use raw SQL for now\n        const result = await db.$executeRaw`\n      INSERT INTO \"SalesPerson\" (\n        id, \"salesPersonId\", name, email, phone, \"countryCode\", \n        designation, department, \"hireDate\", status, \"profilePicture\",\n        address, city, state, \"postalCode\", country, notes,\n        \"createdAt\", \"updatedAt\"\n      ) VALUES (\n        ${salesPersonData.id || 'cuid()'}, ${salesPersonData.salesPersonId}, \n        ${salesPersonData.name}, ${salesPersonData.email}, ${salesPersonData.phone},\n        ${salesPersonData.countryCode || '+971'}, ${salesPersonData.designation || 'Sales Representative'},\n        ${salesPersonData.department || 'Sales'}, ${salesPersonData.hireDate || new Date()},\n        ${salesPersonData.status || 'Active'}, ${salesPersonData.profilePicture || null},\n        ${salesPersonData.address || null}, ${salesPersonData.city || 'Dubai'},\n        ${salesPersonData.state || 'Dubai'}, ${salesPersonData.postalCode || null},\n        ${salesPersonData.country || 'UAE'}, ${salesPersonData.notes || null},\n        ${new Date()}, ${new Date()}\n      )\n    `;\n        return result;\n    }\n    static async getSalesPersonById(id) {\n        const db = this.checkDatabase();\n        const result = await db.$queryRaw`SELECT * FROM \"SalesPerson\" WHERE id = ${id}`;\n        return Array.isArray(result) ? result[0] : result;\n    }\n    static async getSalesPersonBySalesPersonId(salesPersonId) {\n        const db = this.checkDatabase();\n        const result = await db.$queryRaw`SELECT * FROM \"SalesPerson\" WHERE \"salesPersonId\" = ${salesPersonId}`;\n        return Array.isArray(result) ? result[0] : result;\n    }\n    static async updateSalesPerson(id, data) {\n        const db = this.checkDatabase();\n        const result = await db.$executeRaw`\n      UPDATE \"SalesPerson\" \n      SET name = ${data.name}, email = ${data.email}, phone = ${data.phone},\n          \"countryCode\" = ${data.countryCode || '+971'}, designation = ${data.designation || 'Sales Representative'},\n          department = ${data.department || 'Sales'}, status = ${data.status || 'Active'},\n          \"profilePicture\" = ${data.profilePicture || null}, address = ${data.address || null},\n          city = ${data.city || 'Dubai'}, state = ${data.state || 'Dubai'},\n          \"postalCode\" = ${data.postalCode || null}, country = ${data.country || 'UAE'},\n          notes = ${data.notes || null}, \"updatedAt\" = ${new Date()}\n      WHERE id = ${id}\n    `;\n        return result;\n    }\n    static async deleteSalesPerson(id) {\n        const db = this.checkDatabase();\n        const result = await db.$executeRaw`DELETE FROM \"SalesPerson\" WHERE id = ${id}`;\n        return result;\n    }\n    static async getAllSalesPersons() {\n        const db = this.checkDatabase();\n        const result = await db.$queryRaw`SELECT * FROM \"SalesPerson\" ORDER BY \"createdAt\" DESC`;\n        return Array.isArray(result) ? result : [];\n    }\n    // Supplier operations\n    static async createSupplier(supplierData) {\n        const db = this.checkDatabase();\n        return await db.supplier.create({\n            data: supplierData\n        });\n    }\n    static async getSupplierById(id) {\n        const db = this.checkDatabase();\n        return await db.supplier.findUnique({\n            where: {\n                id\n            },\n            include: {\n                materials: true\n            }\n        });\n    }\n    static async updateSupplier(id, data) {\n        const db = this.checkDatabase();\n        return await db.supplier.update({\n            where: {\n                id\n            },\n            data\n        });\n    }\n    static async deleteSupplier(id) {\n        const db = this.checkDatabase();\n        return await db.supplier.delete({\n            where: {\n                id\n            }\n        });\n    }\n    static async getAllSuppliers() {\n        const db = this.checkDatabase();\n        return await db.supplier.findMany({\n            orderBy: {\n                createdAt: 'desc'\n            },\n            include: {\n                materials: true\n            }\n        });\n    }\n    // Material operations\n    static async createMaterial(materialData) {\n        const db = this.checkDatabase();\n        return await db.material.create({\n            data: materialData\n        });\n    }\n    static async getMaterialById(id) {\n        const db = this.checkDatabase();\n        return await db.material.findUnique({\n            where: {\n                id\n            },\n            include: {\n                supplier: true\n            }\n        });\n    }\n    static async updateMaterial(id, data) {\n        const db = this.checkDatabase();\n        return await db.material.update({\n            where: {\n                id\n            },\n            data\n        });\n    }\n    static async deleteMaterial(id) {\n        const db = this.checkDatabase();\n        return await db.material.delete({\n            where: {\n                id\n            }\n        });\n    }\n    static async getAllMaterials() {\n        const db = this.checkDatabase();\n        return await db.material.findMany({\n            orderBy: {\n                createdAt: 'desc'\n            },\n            include: {\n                supplier: true\n            }\n        });\n    }\n    // UAE Area operations - using raw queries for now\n    static async createUAEArea(areaData) {\n        const db = this.checkDatabase();\n        const result = await db.$executeRaw`\n      INSERT INTO \"UAEArea\" (id, name, state, country, \"createdAt\", \"updatedAt\")\n      VALUES (${areaData.id || 'cuid()'}, ${areaData.name}, ${areaData.state}, \n              ${areaData.country || 'UAE'}, ${new Date()}, ${new Date()})\n    `;\n        return result;\n    }\n    static async getAllUAEAreas() {\n        const db = this.checkDatabase();\n        const result = await db.$queryRaw`SELECT * FROM \"UAEArea\" ORDER BY name ASC`;\n        return Array.isArray(result) ? result : [];\n    }\n    // Search operations\n    static async searchQuotes(query) {\n        const db = this.checkDatabase();\n        return await db.quote.findMany({\n            where: {\n                OR: [\n                    {\n                        quoteId: {\n                            contains: query\n                        }\n                    },\n                    {\n                        product: {\n                            contains: query\n                        }\n                    },\n                    {\n                        client: {\n                            contactPerson: {\n                                contains: query\n                            }\n                        }\n                    },\n                    {\n                        client: {\n                            companyName: {\n                                contains: query\n                            }\n                        }\n                    }\n                ]\n            },\n            include: {\n                client: true,\n                user: true,\n                amounts: true\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 50\n        });\n    }\n    static async searchClients(query) {\n        const db = this.checkDatabase();\n        return await db.client.findMany({\n            where: {\n                OR: [\n                    {\n                        contactPerson: {\n                            contains: query\n                        }\n                    },\n                    {\n                        companyName: {\n                            contains: query\n                        }\n                    },\n                    {\n                        email: {\n                            contains: query\n                        }\n                    },\n                    {\n                        phone: {\n                            contains: query\n                        }\n                    }\n                ]\n            },\n            include: {\n                user: true\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 50\n        });\n    }\n    static async searchSuppliers(query) {\n        const db = this.checkDatabase();\n        return await db.supplier.findMany({\n            where: {\n                OR: [\n                    {\n                        name: {\n                            contains: query\n                        }\n                    },\n                    {\n                        contact: {\n                            contains: query\n                        }\n                    },\n                    {\n                        email: {\n                            contains: query\n                        }\n                    }\n                ]\n            },\n            include: {\n                materials: true\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 50\n        });\n    }\n    static async searchSalesPersons(query) {\n        const db = this.checkDatabase();\n        const result = await db.$queryRaw`\n      SELECT * FROM \"SalesPerson\" \n      WHERE name ILIKE ${`%${query}%`} \n         OR email ILIKE ${`%${query}%`} \n         OR \"salesPersonId\" ILIKE ${`%${query}%`}\n      ORDER BY \"createdAt\" DESC \n      LIMIT 50\n    `;\n        return Array.isArray(result) ? result : [];\n    }\n    // Search history operations\n    static async saveSearchHistory(query, userId) {\n        const db = this.checkDatabase();\n        try {\n            return await db.searchHistory.create({\n                data: {\n                    query,\n                    userId: userId || null,\n                    timestamp: new Date()\n                }\n            });\n        } catch (error) {\n            console.error('Error saving search history:', error);\n            // Return a mock object if the table doesn't exist\n            return {\n                id: Date.now(),\n                query,\n                userId,\n                timestamp: new Date()\n            };\n        }\n    }\n    static async getSearchHistory(userId, limit = 10) {\n        const db = this.checkDatabase();\n        try {\n            return await db.searchHistory.findMany({\n                where: {\n                    userId: userId || null\n                },\n                orderBy: {\n                    timestamp: 'desc'\n                },\n                take: limit\n            });\n        } catch (error) {\n            console.error('Error getting search history:', error);\n            // Return empty array if the table doesn't exist\n            return [];\n        }\n    }\n    // System metrics\n    static async getSystemMetrics() {\n        const db = this.checkDatabase();\n        try {\n            const [totalUsers, totalClients, totalQuotes, totalSuppliers, totalMaterials] = await Promise.all([\n                db.user.count(),\n                db.client.count(),\n                db.quote.count(),\n                db.supplier.count(),\n                db.material.count()\n            ]);\n            // Get sales person and UAE area counts using raw queries\n            const salesPersonResult = await db.$queryRaw`SELECT COUNT(*) as count FROM \"SalesPerson\"`;\n            const uaeAreaResult = await db.$queryRaw`SELECT COUNT(*) as count FROM \"UAEArea\"`;\n            const totalSalesPersons = Array.isArray(salesPersonResult) ? salesPersonResult[0]?.count || 0 : 0;\n            const totalUAEAreas = Array.isArray(uaeAreaResult) ? uaeAreaResult[0]?.count || 0 : 0;\n            return {\n                totalUsers,\n                totalClients,\n                totalQuotes,\n                totalSuppliers,\n                totalMaterials,\n                totalSalesPersons,\n                totalUAEAreas,\n                timestamp: new Date().toISOString(),\n                ...this.getDatabaseInfo()\n            };\n        } catch (error) {\n            console.error('Error getting system metrics:', error);\n            return {\n                error: error instanceof Error ? error.message : 'Unknown error',\n                timestamp: new Date().toISOString(),\n                ...this.getDatabaseInfo()\n            };\n        }\n    }\n}\n// Export the main prisma instance and DatabaseService\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmaterials%2Fpapers%2Froute&page=%2Fapi%2Fmaterials%2Fpapers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmaterials%2Fpapers%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmaterials%2Fpapers%2Froute&page=%2Fapi%2Fmaterials%2Fpapers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmaterials%2Fpapers%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_Alifka_Roosseo_Desktop_Project_Smart_printing_update_app_api_materials_papers_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/materials/papers/route.ts */ \"(rsc)/./app/api/materials/papers/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/materials/papers/route\",\n        pathname: \"/api/materials/papers\",\n        filename: \"route\",\n        bundlePath: \"app/api/materials/papers/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/Alifka_Roosseo/Desktop/Project/Smart-printing-update/app/api/materials/papers/route.ts\",\n    nextConfigOutput,\n    userland: _Users_Alifka_Roosseo_Desktop_Project_Smart_printing_update_app_api_materials_papers_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/materials/papers/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmaterials%2Fpapers%2Froute&page=%2Fapi%2Fmaterials%2Fpapers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmaterials%2Fpapers%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmaterials%2Fpapers%2Froute&page=%2Fapi%2Fmaterials%2Fpapers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmaterials%2Fpapers%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();