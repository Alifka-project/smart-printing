/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/sales-persons/route";
exports.ids = ["app/api/sales-persons/route"];
exports.modules = {

/***/ "(rsc)/./app/api/sales-persons/route.ts":
/*!****************************************!*\
  !*** ./app/api/sales-persons/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database_unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database-unified */ \"(rsc)/./lib/database-unified.ts\");\n\n\nasync function GET() {\n    try {\n        console.log('🔍 Fetching sales persons from database...');\n        const dbService = new _lib_database_unified__WEBPACK_IMPORTED_MODULE_1__.DatabaseService();\n        const salesPersons = await dbService.getAllSalesPersons();\n        console.log(`✅ Found ${salesPersons.length} sales persons`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(salesPersons);\n    } catch (error) {\n        console.error('❌ Error fetching sales persons:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to fetch sales persons',\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        console.log('Received sales person data:', JSON.stringify(body, null, 2));\n        // Validate required fields - remove salesPersonId from required fields since it's auto-generated\n        const requiredFields = [\n            'name',\n            'email',\n            'phone'\n        ];\n        for (const field of requiredFields){\n            if (!body[field]) {\n                console.log(`Missing required field: ${field}`);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `Missing required field: ${field}`\n                }, {\n                    status: 400\n                });\n            }\n        }\n        // Generate salesPersonId if not provided\n        if (!body.salesPersonId) {\n            // This will be generated by the database service\n            console.log('No salesPersonId provided, will be auto-generated');\n        }\n        // Create sales person using DatabaseService\n        const dbService = new _lib_database_unified__WEBPACK_IMPORTED_MODULE_1__.DatabaseService();\n        const salesPerson = await dbService.createSalesPerson(body);\n        console.log('Sales person created successfully:', salesPerson.id);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(salesPerson);\n    } catch (error) {\n        console.error('❌ Error creating sales person:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to create sales person',\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3NhbGVzLXBlcnNvbnMvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNDO0FBRWxELGVBQWVFO0lBQ3BCLElBQUk7UUFDRkMsUUFBUUMsR0FBRyxDQUFDO1FBRVosTUFBTUMsWUFBWSxJQUFJSixrRUFBZUE7UUFDckMsTUFBTUssZUFBZSxNQUFNRCxVQUFVRSxrQkFBa0I7UUFFdkRKLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRUUsYUFBYUUsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUUxRCxPQUFPUixxREFBWUEsQ0FBQ1MsSUFBSSxDQUFDSDtJQUUzQixFQUFFLE9BQU9JLE9BQU87UUFDZFAsUUFBUU8sS0FBSyxDQUFDLG1DQUFtQ0E7UUFDakQsT0FBT1YscURBQVlBLENBQUNTLElBQUksQ0FDdEI7WUFBRUMsT0FBTztZQUFpQ0MsU0FBU0QsTUFBTUUsT0FBTztRQUFDLEdBQ2pFO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGO0FBRU8sZUFBZUMsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUU4sSUFBSTtRQUMvQk4sUUFBUUMsR0FBRyxDQUFDLCtCQUErQmEsS0FBS0MsU0FBUyxDQUFDRixNQUFNLE1BQU07UUFFdEUsaUdBQWlHO1FBQ2pHLE1BQU1HLGlCQUFpQjtZQUFDO1lBQVE7WUFBUztTQUFRO1FBQ2pELEtBQUssTUFBTUMsU0FBU0QsZUFBZ0I7WUFDbEMsSUFBSSxDQUFDSCxJQUFJLENBQUNJLE1BQU0sRUFBRTtnQkFDaEJqQixRQUFRQyxHQUFHLENBQUMsQ0FBQyx3QkFBd0IsRUFBRWdCLE9BQU87Z0JBQzlDLE9BQU9wQixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtvQkFBRUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFVSxPQUFPO2dCQUFDLEdBQzVDO29CQUFFUCxRQUFRO2dCQUFJO1lBRWxCO1FBQ0Y7UUFFQSx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDRyxLQUFLSyxhQUFhLEVBQUU7WUFDdkIsaURBQWlEO1lBQ2pEbEIsUUFBUUMsR0FBRyxDQUFDO1FBQ2Q7UUFFQSw0Q0FBNEM7UUFDNUMsTUFBTUMsWUFBWSxJQUFJSixrRUFBZUE7UUFDckMsTUFBTXFCLGNBQWMsTUFBTWpCLFVBQVVrQixpQkFBaUIsQ0FBQ1A7UUFFdERiLFFBQVFDLEdBQUcsQ0FBQyxzQ0FBc0NrQixZQUFZRSxFQUFFO1FBQ2hFLE9BQU94QixxREFBWUEsQ0FBQ1MsSUFBSSxDQUFDYTtJQUUzQixFQUFFLE9BQU9aLE9BQU87UUFDZFAsUUFBUU8sS0FBSyxDQUFDLGtDQUFrQ0E7UUFDaEQsT0FBT1YscURBQVlBLENBQUNTLElBQUksQ0FDdEI7WUFBRUMsT0FBTztZQUFpQ0MsU0FBU0QsTUFBTUUsT0FBTztRQUFDLEdBQ2pFO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvQWxpZmthX1Jvb3NzZW8vRGVza3RvcC9Qcm9qZWN0L1NtYXJ0LXByaW50aW5nLXVwZGF0ZS9hcHAvYXBpL3NhbGVzLXBlcnNvbnMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IERhdGFiYXNlU2VydmljZSB9IGZyb20gJ0AvbGliL2RhdGFiYXNlLXVuaWZpZWQnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCfwn5SNIEZldGNoaW5nIHNhbGVzIHBlcnNvbnMgZnJvbSBkYXRhYmFzZS4uLicpO1xuICAgIFxuICAgIGNvbnN0IGRiU2VydmljZSA9IG5ldyBEYXRhYmFzZVNlcnZpY2UoKTtcbiAgICBjb25zdCBzYWxlc1BlcnNvbnMgPSBhd2FpdCBkYlNlcnZpY2UuZ2V0QWxsU2FsZXNQZXJzb25zKCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYOKchSBGb3VuZCAke3NhbGVzUGVyc29ucy5sZW5ndGh9IHNhbGVzIHBlcnNvbnNgKTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oc2FsZXNQZXJzb25zKTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgc2FsZXMgcGVyc29uczonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCBzYWxlcyBwZXJzb25zJywgZGV0YWlsczogZXJyb3IubWVzc2FnZSB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICBjb25zb2xlLmxvZygnUmVjZWl2ZWQgc2FsZXMgcGVyc29uIGRhdGE6JywgSlNPTi5zdHJpbmdpZnkoYm9keSwgbnVsbCwgMikpO1xuICAgIFxuICAgIC8vIFZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkcyAtIHJlbW92ZSBzYWxlc1BlcnNvbklkIGZyb20gcmVxdWlyZWQgZmllbGRzIHNpbmNlIGl0J3MgYXV0by1nZW5lcmF0ZWRcbiAgICBjb25zdCByZXF1aXJlZEZpZWxkcyA9IFsnbmFtZScsICdlbWFpbCcsICdwaG9uZSddO1xuICAgIGZvciAoY29uc3QgZmllbGQgb2YgcmVxdWlyZWRGaWVsZHMpIHtcbiAgICAgIGlmICghYm9keVtmaWVsZF0pIHtcbiAgICAgICAgY29uc29sZS5sb2coYE1pc3NpbmcgcmVxdWlyZWQgZmllbGQ6ICR7ZmllbGR9YCk7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICB7IGVycm9yOiBgTWlzc2luZyByZXF1aXJlZCBmaWVsZDogJHtmaWVsZH1gIH0sXG4gICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEdlbmVyYXRlIHNhbGVzUGVyc29uSWQgaWYgbm90IHByb3ZpZGVkXG4gICAgaWYgKCFib2R5LnNhbGVzUGVyc29uSWQpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCBiZSBnZW5lcmF0ZWQgYnkgdGhlIGRhdGFiYXNlIHNlcnZpY2VcbiAgICAgIGNvbnNvbGUubG9nKCdObyBzYWxlc1BlcnNvbklkIHByb3ZpZGVkLCB3aWxsIGJlIGF1dG8tZ2VuZXJhdGVkJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIENyZWF0ZSBzYWxlcyBwZXJzb24gdXNpbmcgRGF0YWJhc2VTZXJ2aWNlXG4gICAgY29uc3QgZGJTZXJ2aWNlID0gbmV3IERhdGFiYXNlU2VydmljZSgpO1xuICAgIGNvbnN0IHNhbGVzUGVyc29uID0gYXdhaXQgZGJTZXJ2aWNlLmNyZWF0ZVNhbGVzUGVyc29uKGJvZHkpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdTYWxlcyBwZXJzb24gY3JlYXRlZCBzdWNjZXNzZnVsbHk6Jywgc2FsZXNQZXJzb24uaWQpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihzYWxlc1BlcnNvbik7XG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGNyZWF0aW5nIHNhbGVzIHBlcnNvbjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byBjcmVhdGUgc2FsZXMgcGVyc29uJywgZGV0YWlsczogZXJyb3IubWVzc2FnZSB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIkRhdGFiYXNlU2VydmljZSIsIkdFVCIsImNvbnNvbGUiLCJsb2ciLCJkYlNlcnZpY2UiLCJzYWxlc1BlcnNvbnMiLCJnZXRBbGxTYWxlc1BlcnNvbnMiLCJsZW5ndGgiLCJqc29uIiwiZXJyb3IiLCJkZXRhaWxzIiwibWVzc2FnZSIsInN0YXR1cyIsIlBPU1QiLCJyZXF1ZXN0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXF1aXJlZEZpZWxkcyIsImZpZWxkIiwic2FsZXNQZXJzb25JZCIsInNhbGVzUGVyc29uIiwiY3JlYXRlU2FsZXNQZXJzb24iLCJpZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/sales-persons/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database-unified.ts":
/*!*********************************!*\
  !*** ./lib/database-unified.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\n// Create Prisma client with PostgreSQL configuration only\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        'query',\n        'error',\n        'warn'\n    ] : 0,\n    datasources: {\n        db: {\n            // Use DATABASE_URL for PostgreSQL/Prisma Accelerate only\n            url: process.env.DATABASE_URL\n        }\n    }\n});\n// Only create one instance in production\nif (false) {}\n// Database service class with PostgreSQL interface only\nclass DatabaseService {\n    constructor(){\n        this.prisma = prisma;\n        console.log('DatabaseService initialized with PostgreSQL only');\n    }\n    // Database health check\n    async checkHealth() {\n        try {\n            await this.prisma.$queryRaw`SELECT 1`;\n            return {\n                status: 'healthy',\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                status: 'unhealthy',\n                error: error instanceof Error ? error.message : 'Unknown error',\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Get database info\n    async getDatabaseInfo() {\n        try {\n            // PostgreSQL only\n            const result = await this.prisma.$queryRaw`SELECT version() as version`;\n            return {\n                status: 'connected',\n                info: result,\n                database: 'PostgreSQL',\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                status: 'error',\n                error: error instanceof Error ? error.message : 'Unknown error',\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Get Prisma client\n    getClient() {\n        return this.prisma;\n    }\n    // ===== USER OPERATIONS =====\n    async getAllUsers() {\n        try {\n            return await this.prisma.user.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching users:', error);\n            throw error;\n        }\n    }\n    async getUserByEmail(email) {\n        try {\n            return await this.prisma.user.findUnique({\n                where: {\n                    email\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching user by email:', error);\n            throw error;\n        }\n    }\n    async getUserById(id) {\n        try {\n            return await this.prisma.user.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    quotes: true,\n                    clients: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching user by ID:', error);\n            throw error;\n        }\n    }\n    async createUser(userData) {\n        try {\n            return await this.prisma.user.create({\n                data: userData\n            });\n        } catch (error) {\n            console.error('Error creating user:', error);\n            throw error;\n        }\n    }\n    async updateUser(id, data) {\n        try {\n            return await this.prisma.user.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating user:', error);\n            throw error;\n        }\n    }\n    async deleteUser(id) {\n        try {\n            return await this.prisma.user.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting user:', error);\n            throw error;\n        }\n    }\n    // ===== SALES PERSON OPERATIONS =====\n    async getAllSalesPersons() {\n        try {\n            return await this.prisma.salesPerson.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching sales persons:', error);\n            throw error;\n        }\n    }\n    async getSalesPersonById(id) {\n        try {\n            return await this.prisma.salesPerson.findUnique({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching sales person by ID:', error);\n            throw error;\n        }\n    }\n    async getSalesPersonBySalesPersonId(salesPersonId) {\n        try {\n            return await this.prisma.salesPerson.findUnique({\n                where: {\n                    salesPersonId\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching sales person by sales person ID:', error);\n            throw error;\n        }\n    }\n    async createSalesPerson(salesPersonData) {\n        try {\n            // Auto-generate salesPersonId if not provided\n            if (!salesPersonData.salesPersonId) {\n                const allSalesPersons = await this.getAllSalesPersons();\n                const nextId = allSalesPersons.length + 1;\n                salesPersonData.salesPersonId = `SL-${nextId.toString().padStart(3, '0')}`;\n                console.log('Auto-generated salesPersonId:', salesPersonData.salesPersonId);\n            }\n            return await this.prisma.salesPerson.create({\n                data: salesPersonData\n            });\n        } catch (error) {\n            console.error('Error creating sales person:', error);\n            throw error;\n        }\n    }\n    async updateSalesPerson(id, data) {\n        try {\n            return await this.prisma.salesPerson.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating sales person:', error);\n            throw error;\n        }\n    }\n    async deleteSalesPerson(id) {\n        try {\n            return await this.prisma.salesPerson.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting sales person:', error);\n            throw error;\n        }\n    }\n    // ===== CLIENT OPERATIONS =====\n    async getAllClients() {\n        try {\n            return await this.prisma.client.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                include: {\n                    user: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching clients:', error);\n            throw error;\n        }\n    }\n    async getClientById(id) {\n        try {\n            return await this.prisma.client.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    user: true,\n                    quotes: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching client by ID:', error);\n            throw error;\n        }\n    }\n    async createClient(clientData) {\n        try {\n            return await this.prisma.client.create({\n                data: clientData\n            });\n        } catch (error) {\n            console.error('Error creating client:', error);\n            throw error;\n        }\n    }\n    async updateClient(id, data) {\n        try {\n            return await this.prisma.client.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating client:', error);\n            throw error;\n        }\n    }\n    async deleteClient(id) {\n        try {\n            return await this.prisma.client.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting client:', error);\n            throw error;\n        }\n    }\n    // ===== QUOTE OPERATIONS =====\n    async getAllQuotes() {\n        try {\n            return await this.prisma.quote.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                include: {\n                    client: true,\n                    user: true,\n                    amounts: true,\n                    papers: true,\n                    finishing: true,\n                    QuoteOperational: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching quotes:', error);\n            throw error;\n        }\n    }\n    async getQuoteById(id) {\n        try {\n            return await this.prisma.quote.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    client: true,\n                    user: true,\n                    finishing: true,\n                    papers: true,\n                    amounts: true,\n                    QuoteOperational: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching quote by ID:', error);\n            throw error;\n        }\n    }\n    async createQuote(quoteData) {\n        try {\n            return await this.prisma.quote.create({\n                data: quoteData,\n                include: {\n                    client: true,\n                    user: true\n                }\n            });\n        } catch (error) {\n            console.error('Error creating quote:', error);\n            throw error;\n        }\n    }\n    async updateQuote(id, data) {\n        try {\n            return await this.prisma.quote.update({\n                where: {\n                    id\n                },\n                data,\n                include: {\n                    client: true,\n                    user: true\n                }\n            });\n        } catch (error) {\n            console.error('Error updating quote:', error);\n            throw error;\n        }\n    }\n    async updateQuoteStatus(id, status) {\n        try {\n            return await this.prisma.quote.update({\n                where: {\n                    id\n                },\n                data: {\n                    status,\n                    updatedAt: new Date()\n                },\n                include: {\n                    client: true,\n                    user: true\n                }\n            });\n        } catch (error) {\n            console.error('Error updating quote status:', error);\n            throw error;\n        }\n    }\n    async updateQuoteWithDetails(id, data) {\n        try {\n            return await this.prisma.quote.update({\n                where: {\n                    id\n                },\n                data: {\n                    ...data,\n                    updatedAt: new Date()\n                },\n                include: {\n                    client: true,\n                    user: true,\n                    papers: true,\n                    finishing: true,\n                    amounts: true,\n                    QuoteOperational: true\n                }\n            });\n        } catch (error) {\n            console.error('Error updating quote with details:', error);\n            throw error;\n        }\n    }\n    async deleteQuote(id) {\n        try {\n            return await this.prisma.quote.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting quote:', error);\n            throw error;\n        }\n    }\n    // ===== SUPPLIER OPERATIONS =====\n    async getAllSuppliers() {\n        try {\n            return await this.prisma.supplier.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                include: {\n                    materials: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching suppliers:', error);\n            throw error;\n        }\n    }\n    async getSupplierById(id) {\n        try {\n            return await this.prisma.supplier.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    materials: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching supplier by ID:', error);\n            throw error;\n        }\n    }\n    async createSupplier(supplierData) {\n        try {\n            return await this.prisma.supplier.create({\n                data: supplierData\n            });\n        } catch (error) {\n            console.error('Error creating supplier:', error);\n            throw error;\n        }\n    }\n    async updateSupplier(id, data) {\n        try {\n            return await this.prisma.supplier.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating supplier:', error);\n            throw error;\n        }\n    }\n    async deleteSupplier(id) {\n        try {\n            return await this.prisma.supplier.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting supplier:', error);\n            throw error;\n        }\n    }\n    // ===== MATERIAL OPERATIONS =====\n    async getAllMaterials() {\n        try {\n            return await this.prisma.material.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                include: {\n                    supplier: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching materials:', error);\n            throw error;\n        }\n    }\n    async getMaterialById(id) {\n        try {\n            return await this.prisma.material.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    supplier: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching material by ID:', error);\n            throw error;\n        }\n    }\n    async createMaterial(materialData) {\n        try {\n            return await this.prisma.material.create({\n                data: materialData\n            });\n        } catch (error) {\n            console.error('Error creating material:', error);\n            throw error;\n        }\n    }\n    async updateMaterial(id, data) {\n        try {\n            return await this.prisma.material.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating material:', error);\n            throw error;\n        }\n    }\n    async deleteMaterial(id) {\n        try {\n            return await this.prisma.material.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting material:', error);\n            throw error;\n        }\n    }\n    // ===== PAPER OPERATIONS =====\n    async getAllPapers() {\n        try {\n            return await this.prisma.paper.findMany({\n                orderBy: {\n                    id: 'desc'\n                },\n                include: {\n                    quote: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching papers:', error);\n            throw error;\n        }\n    }\n    async getPaperById(id) {\n        try {\n            return await this.prisma.paper.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    quote: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching paper by ID:', error);\n            throw error;\n        }\n    }\n    async createPaper(paperData) {\n        try {\n            return await this.prisma.paper.create({\n                data: paperData\n            });\n        } catch (error) {\n            console.error('Error creating paper:', error);\n            throw error;\n        }\n    }\n    async updatePaper(id, data) {\n        try {\n            return await this.prisma.paper.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating paper:', error);\n            throw error;\n        }\n    }\n    async deletePaper(id) {\n        try {\n            return await this.prisma.paper.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting paper:', error);\n            throw error;\n        }\n    }\n    // ===== FINISHING OPERATIONS =====\n    async getAllFinishings() {\n        try {\n            return await this.prisma.finishing.findMany({\n                orderBy: {\n                    id: 'desc'\n                },\n                include: {\n                    quote: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching finishings:', error);\n            throw error;\n        }\n    }\n    async getFinishingById(id) {\n        try {\n            return await this.prisma.finishing.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    quote: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching finishing by ID:', error);\n            throw error;\n        }\n    }\n    async createFinishing(finishingData) {\n        try {\n            return await this.prisma.finishing.create({\n                data: finishingData\n            });\n        } catch (error) {\n            console.error('Error creating finishing:', error);\n            throw error;\n        }\n    }\n    async updateFinishing(id, data) {\n        try {\n            return await this.prisma.finishing.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating finishing:', error);\n            throw error;\n        }\n    }\n    async deleteFinishing(id) {\n        try {\n            return await this.prisma.finishing.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting finishing:', error);\n            throw error;\n        }\n    }\n    // ===== QUOTE AMOUNT OPERATIONS =====\n    async getQuoteAmountByQuoteId(quoteId) {\n        try {\n            return await this.prisma.quoteAmount.findUnique({\n                where: {\n                    quoteId\n                },\n                include: {\n                    quote: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching quote amount:', error);\n            throw error;\n        }\n    }\n    async createQuoteAmount(amountData) {\n        try {\n            return await this.prisma.quoteAmount.create({\n                data: amountData\n            });\n        } catch (error) {\n            console.error('Error creating quote amount:', error);\n            throw error;\n        }\n    }\n    async updateQuoteAmount(quoteId, data) {\n        try {\n            return await this.prisma.quoteAmount.update({\n                where: {\n                    quoteId\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating quote amount:', error);\n            throw error;\n        }\n    }\n    async deleteQuoteAmount(quoteId) {\n        try {\n            return await this.prisma.quoteAmount.delete({\n                where: {\n                    quoteId\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting quote amount:', error);\n            throw error;\n        }\n    }\n    // ===== QUOTE OPERATIONAL OPERATIONS =====\n    async getQuoteOperationalByQuoteId(quoteId) {\n        try {\n            return await this.prisma.quoteOperational.findUnique({\n                where: {\n                    quoteId\n                },\n                include: {\n                    quote: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching quote operational:', error);\n            throw error;\n        }\n    }\n    async createQuoteOperational(operationalData) {\n        try {\n            return await this.prisma.quoteOperational.create({\n                data: operationalData\n            });\n        } catch (error) {\n            console.error('Error creating quote operational:', error);\n            throw error;\n        }\n    }\n    async updateQuoteOperational(quoteId, data) {\n        try {\n            return await this.prisma.quoteOperational.update({\n                where: {\n                    quoteId\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating quote operational:', error);\n            throw error;\n        }\n    }\n    async deleteQuoteOperational(quoteId) {\n        try {\n            return await this.prisma.quoteOperational.delete({\n                where: {\n                    quoteId\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting quote operational:', error);\n            throw error;\n        }\n    }\n    // ===== UAE AREA OPERATIONS =====\n    async getAllUAEAreas() {\n        try {\n            return await this.prisma.uAEArea.findMany({\n                orderBy: {\n                    name: 'asc'\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching UAE areas:', error);\n            throw error;\n        }\n    }\n    async getUAEAreaById(id) {\n        try {\n            return await this.prisma.uAEArea.findUnique({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching UAE area by ID:', error);\n            throw error;\n        }\n    }\n    async createUAEArea(areaData) {\n        try {\n            return await this.prisma.uAEArea.create({\n                data: areaData\n            });\n        } catch (error) {\n            console.error('Error creating UAE area:', error);\n            throw error;\n        }\n    }\n    async updateUAEArea(id, data) {\n        try {\n            return await this.prisma.uAEArea.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating UAE area:', error);\n            throw error;\n        }\n    }\n    async deleteUAEArea(id) {\n        try {\n            return await this.prisma.uAEArea.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting UAE area:', error);\n            throw error;\n        }\n    }\n    // ===== SEARCH HISTORY OPERATIONS =====\n    async getAllSearchHistory(userId) {\n        try {\n            return await this.prisma.searchHistory.findMany({\n                where: userId ? {\n                    userId\n                } : {},\n                orderBy: {\n                    timestamp: 'desc'\n                },\n                include: {\n                    user: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching search history:', error);\n            throw error;\n        }\n    }\n    async createSearchHistory(searchData) {\n        try {\n            return await this.prisma.searchHistory.create({\n                data: searchData\n            });\n        } catch (error) {\n            console.error('Error creating search history:', error);\n            throw error;\n        }\n    }\n    async deleteSearchHistory(id) {\n        try {\n            return await this.prisma.searchHistory.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting search history:', error);\n            throw error;\n        }\n    }\n    // ===== SEARCH ANALYTICS OPERATIONS =====\n    async getAllSearchAnalytics(userId) {\n        try {\n            return await this.prisma.searchAnalytics.findMany({\n                where: userId ? {\n                    userId\n                } : {},\n                orderBy: {\n                    timestamp: 'desc'\n                },\n                include: {\n                    user: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching search analytics:', error);\n            throw error;\n        }\n    }\n    async createSearchAnalytics(analyticsData) {\n        try {\n            return await this.prisma.searchAnalytics.create({\n                data: analyticsData\n            });\n        } catch (error) {\n            console.error('Error creating search analytics:', error);\n            throw error;\n        }\n    }\n    async deleteSearchAnalytics(id) {\n        try {\n            return await this.prisma.searchAnalytics.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting search analytics:', error);\n            throw error;\n        }\n    }\n    // ===== SEARCH OPERATIONS =====\n    async searchQuotes(query) {\n        try {\n            return await this.prisma.quote.findMany({\n                where: {\n                    OR: [\n                        {\n                            quoteId: {\n                                contains: query\n                            }\n                        },\n                        {\n                            product: {\n                                contains: query\n                            }\n                        },\n                        {\n                            client: {\n                                contactPerson: {\n                                    contains: query\n                                }\n                            }\n                        },\n                        {\n                            client: {\n                                companyName: {\n                                    contains: query\n                                }\n                            }\n                        }\n                    ]\n                },\n                include: {\n                    client: true,\n                    user: true\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                take: 50\n            });\n        } catch (error) {\n            console.error('Error searching quotes:', error);\n            throw error;\n        }\n    }\n    async searchClients(query) {\n        try {\n            return await this.prisma.client.findMany({\n                where: {\n                    OR: [\n                        {\n                            contactPerson: {\n                                contains: query\n                            }\n                        },\n                        {\n                            companyName: {\n                                contains: query\n                            }\n                        },\n                        {\n                            email: {\n                                contains: query\n                            }\n                        },\n                        {\n                            phone: {\n                                contains: query\n                            }\n                        }\n                    ]\n                },\n                include: {\n                    user: true\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                take: 50\n            });\n        } catch (error) {\n            console.error('Error searching clients:', error);\n            throw error;\n        }\n    }\n    async searchSuppliers(query) {\n        try {\n            return await this.prisma.supplier.findMany({\n                where: {\n                    OR: [\n                        {\n                            name: {\n                                contains: query\n                            }\n                        },\n                        {\n                            email: {\n                                contains: query\n                            }\n                        },\n                        {\n                            phone: {\n                                contains: query\n                            }\n                        }\n                    ]\n                },\n                include: {\n                    materials: true\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                take: 50\n            });\n        } catch (error) {\n            console.error('Error searching suppliers:', error);\n            throw error;\n        }\n    }\n    async searchMaterials(query) {\n        try {\n            return await this.prisma.material.findMany({\n                where: {\n                    OR: [\n                        {\n                            name: {\n                                contains: query\n                            }\n                        },\n                        {\n                            materialId: {\n                                contains: query\n                            }\n                        }\n                    ]\n                },\n                include: {\n                    supplier: true\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                take: 50\n            });\n        } catch (error) {\n            console.error('Error searching materials:', error);\n            throw error;\n        }\n    }\n    // ===== DASHBOARD OPERATIONS =====\n    async getDashboardCounts() {\n        try {\n            const [quotes, clients, users, suppliers, materials] = await Promise.all([\n                this.prisma.quote.count(),\n                this.prisma.client.count(),\n                this.prisma.user.count(),\n                this.prisma.supplier.count(),\n                this.prisma.material.count()\n            ]);\n            return {\n                quotes,\n                clients,\n                users,\n                suppliers,\n                materials\n            };\n        } catch (error) {\n            console.error('Error getting dashboard counts:', error);\n            throw error;\n        }\n    }\n    async getRecentQuotes(limit = 10) {\n        try {\n            return await this.prisma.quote.findMany({\n                take: limit,\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                include: {\n                    client: {\n                        select: {\n                            id: true,\n                            contactPerson: true,\n                            companyName: true,\n                            email: true\n                        }\n                    },\n                    user: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error getting recent quotes:', error);\n            throw error;\n        }\n    }\n    // ===== SYSTEM METRICS =====\n    async getSystemMetrics() {\n        try {\n            const [totalUsers, totalClients, totalQuotes, totalSuppliers, totalMaterials, totalSalesPersons, totalUAEAreas] = await Promise.all([\n                this.prisma.user.count(),\n                this.prisma.client.count(),\n                this.prisma.quote.count(),\n                this.prisma.supplier.count(),\n                this.prisma.material.count(),\n                this.prisma.salesPerson.count(),\n                this.prisma.uAEArea.count()\n            ]);\n            return {\n                totalUsers,\n                totalClients,\n                totalQuotes,\n                totalSuppliers,\n                totalMaterials,\n                totalSalesPersons,\n                totalUAEAreas,\n                timestamp: new Date().toISOString(),\n                database: 'PostgreSQL',\n                environment: \"development\" || 0\n            };\n        } catch (error) {\n            console.error('Error getting system metrics:', error);\n            throw error;\n        }\n    }\n    // ===== DATABASE MANAGEMENT OPERATIONS =====\n    async getAllTablesWithData() {\n        try {\n            const tables = [\n                'User',\n                'SalesPerson',\n                'Client',\n                'Quote',\n                'Paper',\n                'Finishing',\n                'QuoteAmount',\n                'SearchHistory',\n                'SearchAnalytics',\n                'Supplier',\n                'Material',\n                'QuoteOperational',\n                'UAEArea'\n            ];\n            const tableData = await Promise.all(tables.map(async (tableName)=>{\n                try {\n                    const columns = await this.getTableColumns(tableName);\n                    const data = await this.getTableData(tableName);\n                    return {\n                        name: tableName,\n                        columns,\n                        data\n                    };\n                } catch (error) {\n                    console.error(`Error fetching table ${tableName}:`, error);\n                    return {\n                        name: tableName,\n                        columns: [],\n                        data: []\n                    };\n                }\n            }));\n            return tableData.filter((table)=>table.columns.length > 0);\n        } catch (error) {\n            console.error('Error getting all tables with data:', error);\n            throw error;\n        }\n    }\n    async getTableColumns(tableName) {\n        try {\n            // Get table schema information using Prisma introspection\n            const result = await this.prisma.$queryRaw`\n        SELECT \n          c.column_name as name,\n          c.data_type as type,\n          c.is_nullable = 'NO' as is_required,\n          c.column_default as default_value,\n          CASE WHEN pk.column_name IS NOT NULL THEN true ELSE false END as is_primary\n        FROM information_schema.columns c\n        LEFT JOIN (\n          SELECT ku.column_name\n          FROM information_schema.table_constraints tc\n          JOIN information_schema.key_column_usage ku ON tc.constraint_name = ku.constraint_name\n          WHERE tc.constraint_type = 'PRIMARY KEY' \n          AND ku.table_name = ${tableName}\n        ) pk ON c.column_name = pk.column_name\n        WHERE c.table_name = ${tableName}\n        ORDER BY c.ordinal_position\n      `;\n            return result.map((col)=>({\n                    name: col.name,\n                    type: col.type,\n                    isRequired: col.is_required,\n                    defaultValue: col.default_value,\n                    isPrimary: col.is_primary\n                }));\n        } catch (error) {\n            console.error(`Error getting columns for table ${tableName}:`, error);\n            throw error;\n        }\n    }\n    async getTableData(tableName) {\n        try {\n            const result = await this.prisma.$queryRawUnsafe(`SELECT * FROM \"${tableName}\" LIMIT 100`);\n            return result;\n        } catch (error) {\n            console.error(`Error getting data for table ${tableName}:`, error);\n            throw error;\n        }\n    }\n    async addTableRow(tableName, data) {\n        try {\n            // Get column information to handle required fields\n            const columns = await this.getTableColumns(tableName);\n            const requiredColumns = columns.filter((col)=>col.isRequired && !col.defaultValue);\n            // Add missing required fields with default values\n            const enhancedData = {\n                ...data\n            };\n            requiredColumns.forEach((col)=>{\n                if (!enhancedData[col.name]) {\n                    if (col.name === 'id') {\n                        // Generate a unique ID for primary key\n                        enhancedData[col.name] = `gen_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n                    } else if (col.type === 'timestamp without time zone') {\n                        enhancedData[col.name] = new Date().toISOString();\n                    } else if (col.type === 'boolean') {\n                        enhancedData[col.name] = false;\n                    } else {\n                        enhancedData[col.name] = `default_${col.name}`;\n                    }\n                }\n            });\n            const columnNames = Object.keys(enhancedData).map((col)=>`\"${col}\"`).join(', ');\n            const values = Object.values(enhancedData).map((val)=>typeof val === 'string' ? `'${val.replace(/'/g, \"''\")}'` : val).join(', ');\n            const query = `INSERT INTO \"${tableName}\" (${columnNames}) VALUES (${values}) RETURNING *`;\n            const result = await this.prisma.$queryRawUnsafe(query);\n            return result;\n        } catch (error) {\n            console.error(`Error adding row to table ${tableName}:`, error);\n            throw error;\n        }\n    }\n    async updateTableRow(tableName, rowIndex, data) {\n        try {\n            // First get the current data to identify the row\n            const allData = await this.getTableData(tableName);\n            const targetRow = allData[rowIndex];\n            if (!targetRow) {\n                throw new Error(`Row at index ${rowIndex} not found`);\n            }\n            // Build SET clause\n            const setClause = Object.entries(data).map(([key, value])=>{\n                const val = typeof value === 'string' ? `'${value.replace(/'/g, \"''\")}'` : value;\n                return `\"${key}\" = ${val}`;\n            }).join(', ');\n            // Build WHERE clause using primary key or first column\n            const columns = await this.getTableColumns(tableName);\n            const primaryKey = columns.find((col)=>col.isPrimary)?.name || columns[0]?.name;\n            const whereValue = targetRow[primaryKey];\n            const whereClause = `\"${primaryKey}\" = ${typeof whereValue === 'string' ? `'${whereValue.replace(/'/g, \"''\")}'` : whereValue}`;\n            const query = `UPDATE \"${tableName}\" SET ${setClause} WHERE ${whereClause} RETURNING *`;\n            const result = await this.prisma.$queryRawUnsafe(query);\n            return result;\n        } catch (error) {\n            console.error(`Error updating row in table ${tableName}:`, error);\n            throw error;\n        }\n    }\n    async deleteTableRow(tableName, rowIndex) {\n        try {\n            // First get the current data to identify the row\n            const allData = await this.getTableData(tableName);\n            const targetRow = allData[rowIndex];\n            if (!targetRow) {\n                throw new Error(`Row at index ${rowIndex} not found`);\n            }\n            // Build WHERE clause using primary key or first column\n            const columns = await this.getTableColumns(tableName);\n            const primaryKey = columns.find((col)=>col.isPrimary)?.name || columns[0]?.name;\n            const whereValue = targetRow[primaryKey];\n            const whereClause = `\"${primaryKey}\" = ${typeof whereValue === 'string' ? `'${whereValue.replace(/'/g, \"''\")}'` : whereValue}`;\n            const query = `DELETE FROM \"${tableName}\" WHERE ${whereClause} RETURNING *`;\n            const result = await this.prisma.$queryRawUnsafe(query);\n            return result;\n        } catch (error) {\n            console.error(`Error deleting row from table ${tableName}:`, error);\n            throw error;\n        }\n    }\n    async addTableColumn(tableName, columnData) {\n        try {\n            const { name, type, isRequired, defaultValue } = columnData;\n            let query = `ALTER TABLE \"${tableName}\" ADD COLUMN \"${name}\" ${type}`;\n            if (isRequired) {\n                query += ' NOT NULL';\n            }\n            if (defaultValue !== undefined && defaultValue !== '') {\n                const val = typeof defaultValue === 'string' ? `'${defaultValue.replace(/'/g, \"''\")}'` : defaultValue;\n                query += ` DEFAULT ${val}`;\n            }\n            await this.prisma.$queryRawUnsafe(query);\n            return {\n                success: true,\n                message: `Column ${name} added to table ${tableName}`\n            };\n        } catch (error) {\n            console.error(`Error adding column to table ${tableName}:`, error);\n            throw error;\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database-unified.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsales-persons%2Froute&page=%2Fapi%2Fsales-persons%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsales-persons%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsales-persons%2Froute&page=%2Fapi%2Fsales-persons%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsales-persons%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_Alifka_Roosseo_Desktop_Project_Smart_printing_update_app_api_sales_persons_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/sales-persons/route.ts */ \"(rsc)/./app/api/sales-persons/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/sales-persons/route\",\n        pathname: \"/api/sales-persons\",\n        filename: \"route\",\n        bundlePath: \"app/api/sales-persons/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/Alifka_Roosseo/Desktop/Project/Smart-printing-update/app/api/sales-persons/route.ts\",\n    nextConfigOutput,\n    userland: _Users_Alifka_Roosseo_Desktop_Project_Smart_printing_update_app_api_sales_persons_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/sales-persons/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsales-persons%2Froute&page=%2Fapi%2Fsales-persons%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsales-persons%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsales-persons%2Froute&page=%2Fapi%2Fsales-persons%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsales-persons%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();