/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/users/route";
exports.ids = ["app/api/users/route"];
exports.modules = {

/***/ "(rsc)/./app/api/users/route.ts":
/*!********************************!*\
  !*** ./app/api/users/route.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database_production__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database-production */ \"(rsc)/./lib/database-production.ts\");\n\n\nasync function GET() {\n    try {\n        const dbService = new _lib_database_production__WEBPACK_IMPORTED_MODULE_1__.DatabaseService();\n        const users = await dbService.getAllUsers();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(users);\n    } catch (error) {\n        console.error('Error fetching users:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to fetch users'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const dbService = new _lib_database_production__WEBPACK_IMPORTED_MODULE_1__.DatabaseService();\n        const user = await dbService.createUser(body);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(user);\n    } catch (error) {\n        console.error('Error creating user:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to create user'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3VzZXJzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDSTtBQUVyRCxlQUFlRTtJQUNwQixJQUFJO1FBQ0YsTUFBTUMsWUFBWSxJQUFJRixxRUFBZUE7UUFDckMsTUFBTUcsUUFBUSxNQUFNRCxVQUFVRSxXQUFXO1FBQ3pDLE9BQU9MLHFEQUFZQSxDQUFDTSxJQUFJLENBQUNGO0lBQzNCLEVBQUUsT0FBT0csT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMseUJBQXlCQTtRQUN2QyxPQUFPUCxxREFBWUEsQ0FBQ00sSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1FBQXdCLEdBQ2pDO1lBQUVFLFFBQVE7UUFBSTtJQUVsQjtBQUNGO0FBRU8sZUFBZUMsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUwsSUFBSTtRQUMvQixNQUFNSCxZQUFZLElBQUlGLHFFQUFlQTtRQUNyQyxNQUFNWSxPQUFPLE1BQU1WLFVBQVVXLFVBQVUsQ0FBQ0Y7UUFDeEMsT0FBT1oscURBQVlBLENBQUNNLElBQUksQ0FBQ087SUFDM0IsRUFBRSxPQUFPTixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyx3QkFBd0JBO1FBQ3RDLE9BQU9QLHFEQUFZQSxDQUFDTSxJQUFJLENBQ3RCO1lBQUVDLE9BQU87UUFBd0IsR0FDakM7WUFBRUUsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9BbGlma2FfUm9vc3Nlby9EZXNrdG9wL1Byb2plY3QvU21hcnQtcHJpbnRpbmctdXBkYXRlL2FwcC9hcGkvdXNlcnMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IERhdGFiYXNlU2VydmljZSB9IGZyb20gJ0AvbGliL2RhdGFiYXNlLXByb2R1Y3Rpb24nO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRiU2VydmljZSA9IG5ldyBEYXRhYmFzZVNlcnZpY2UoKTtcbiAgICBjb25zdCB1c2VycyA9IGF3YWl0IGRiU2VydmljZS5nZXRBbGxVc2VycygpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih1c2Vycyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlcnM6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggdXNlcnMnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIGNvbnN0IGRiU2VydmljZSA9IG5ldyBEYXRhYmFzZVNlcnZpY2UoKTtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgZGJTZXJ2aWNlLmNyZWF0ZVVzZXIoYm9keSk7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHVzZXIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHVzZXI6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gY3JlYXRlIHVzZXInIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJEYXRhYmFzZVNlcnZpY2UiLCJHRVQiLCJkYlNlcnZpY2UiLCJ1c2VycyIsImdldEFsbFVzZXJzIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsInN0YXR1cyIsIlBPU1QiLCJyZXF1ZXN0IiwiYm9keSIsInVzZXIiLCJjcmVhdGVVc2VyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/users/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database-production.ts":
/*!************************************!*\
  !*** ./lib/database-production.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService),\n/* harmony export */   checkDatabaseConnection: () => (/* binding */ checkDatabaseConnection),\n/* harmony export */   closeDatabaseConnection: () => (/* binding */ closeDatabaseConnection),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\n// Production Prisma client for Vercel\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        'error'\n    ],\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL\n        }\n    }\n});\n// Only create one instance\nif (false) {}\n// Production Database Service Class\nclass DatabaseService {\n    constructor(){\n        this.prisma = prisma;\n        console.log('Production DatabaseService initialized with PostgreSQL');\n    }\n    // Database health check\n    async checkHealth() {\n        try {\n            await this.prisma.$queryRaw`SELECT 1`;\n            return {\n                status: 'healthy',\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                status: 'unhealthy',\n                error: error instanceof Error ? error.message : 'Unknown error',\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Get database info\n    async getDatabaseInfo() {\n        try {\n            const result = await this.prisma.$queryRaw`SELECT version() as version`;\n            return {\n                status: 'connected',\n                info: result,\n                database: 'Vercel PostgreSQL',\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                status: 'error',\n                error: error instanceof Error ? error.message : 'Unknown error',\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Get Prisma client\n    getClient() {\n        return this.prisma;\n    }\n    // ===== USER OPERATIONS =====\n    async getAllUsers() {\n        try {\n            return await this.prisma.user.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching users:', error);\n            throw error;\n        }\n    }\n    async getUserByEmail(email) {\n        try {\n            return await this.prisma.user.findUnique({\n                where: {\n                    email\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching user by email:', error);\n            throw error;\n        }\n    }\n    async getUserById(id) {\n        try {\n            return await this.prisma.user.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    clients: true,\n                    quotes: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching user by ID:', error);\n            throw error;\n        }\n    }\n    async createUser(userData) {\n        try {\n            return await this.prisma.user.create({\n                data: userData\n            });\n        } catch (error) {\n            console.error('Error creating user:', error);\n            throw error;\n        }\n    }\n    async updateUser(id, data) {\n        try {\n            return await this.prisma.user.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating user:', error);\n            throw error;\n        }\n    }\n    async deleteUser(id) {\n        try {\n            return await this.prisma.user.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting user:', error);\n            throw error;\n        }\n    }\n    // ===== CLIENT OPERATIONS =====\n    async getAllClients() {\n        try {\n            return await this.prisma.client.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                include: {\n                    user: true,\n                    quotes: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching clients:', error);\n            throw error;\n        }\n    }\n    async getClientById(id) {\n        try {\n            return await this.prisma.client.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    user: true,\n                    quotes: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching client by ID:', error);\n            throw error;\n        }\n    }\n    async createClient(clientData) {\n        try {\n            console.log('Creating client with data:', JSON.stringify(clientData, null, 2));\n            // Validate required fields before creation\n            const requiredFields = [\n                'clientType',\n                'contactPerson',\n                'email',\n                'phone',\n                'countryCode'\n            ];\n            for (const field of requiredFields){\n                if (!clientData[field]) {\n                    throw new Error(`Missing required field: ${field}`);\n                }\n            }\n            // Ensure only valid fields are sent to the production database\n            const validClientData = {\n                clientType: clientData.clientType,\n                companyName: clientData.companyName || null,\n                contactPerson: clientData.contactPerson,\n                email: clientData.email,\n                phone: clientData.phone,\n                countryCode: clientData.countryCode,\n                role: clientData.role || null,\n                status: clientData.status || 'Active',\n                userId: clientData.userId || null,\n                address: clientData.address || null,\n                city: clientData.city || null,\n                state: clientData.state || null,\n                postalCode: clientData.postalCode || null,\n                country: clientData.country || null\n            };\n            console.log('Validated client data for production:', JSON.stringify(validClientData, null, 2));\n            const client = await this.prisma.client.create({\n                data: validClientData\n            });\n            console.log('Client created successfully:', client.id);\n            return client;\n        } catch (error) {\n            console.error('Error creating client:', error);\n            console.error('Client data that failed:', JSON.stringify(clientData, null, 2));\n            // Provide more specific error information\n            if (error instanceof Error) {\n                throw new Error(`Client creation failed: ${error.message}`);\n            }\n            throw new Error('Client creation failed with unknown error');\n        }\n    }\n    async updateClient(id, data) {\n        try {\n            return await this.prisma.client.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating client:', error);\n            throw error;\n        }\n    }\n    async deleteClient(id) {\n        try {\n            return await this.prisma.client.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting client:', error);\n            throw error;\n        }\n    }\n    // ===== QUOTE OPERATIONS =====\n    async getAllQuotes() {\n        try {\n            const quotes = await this.prisma.quote.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                include: {\n                    client: true,\n                    user: true,\n                    amounts: true,\n                    papers: true,\n                    finishing: true\n                }\n            });\n            // Add operational field and parse additional costs for frontend compatibility\n            return quotes.map((quote)=>({\n                    ...quote,\n                    operational: null,\n                    additionalCosts: quote.additionalCostsData ? JSON.parse(quote.additionalCostsData) : []\n                }));\n        } catch (error) {\n            console.error('Error fetching quotes:', error);\n            throw error;\n        }\n    }\n    async getQuoteById(id) {\n        try {\n            const quote = await this.prisma.quote.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    client: true,\n                    user: true,\n                    finishing: true,\n                    papers: true,\n                    amounts: true\n                }\n            });\n            if (quote) {\n                // Add operational field and parse additional costs for frontend compatibility\n                return {\n                    ...quote,\n                    operational: null,\n                    additionalCosts: quote.additionalCostsData ? JSON.parse(quote.additionalCostsData) : []\n                };\n            }\n            return quote;\n        } catch (error) {\n            console.error('Error fetching quote by ID:', error);\n            throw error;\n        }\n    }\n    async createQuote(quoteData) {\n        try {\n            console.log('Creating quote with data:', JSON.stringify(quoteData, null, 2));\n            // Extract nested data that needs to be created separately\n            const { papers, finishing, amounts, operational, additionalCosts, ...mainQuoteData } = quoteData;\n            // Handle additional costs - store as JSON string\n            if (additionalCosts && additionalCosts.create && Array.isArray(additionalCosts.create)) {\n                mainQuoteData.additionalCostsData = JSON.stringify(additionalCosts.create);\n            }\n            // Create the main quote first\n            const quote = await this.prisma.quote.create({\n                data: mainQuoteData,\n                include: {\n                    client: true,\n                    user: true\n                }\n            });\n            console.log('Main quote created successfully:', quote.id);\n            // Create papers if provided\n            if (papers && Array.isArray(papers) && papers.length > 0) {\n                console.log('Creating papers for quote:', papers.length);\n                for (const paper of papers){\n                    await this.prisma.paper.create({\n                        data: {\n                            ...paper,\n                            quoteId: quote.id\n                        }\n                    });\n                }\n                console.log('Papers created successfully');\n            }\n            // Create finishing if provided\n            if (finishing && Array.isArray(finishing) && finishing.length > 0) {\n                console.log('Creating finishing for quote:', finishing.length);\n                for (const finish of finishing){\n                    await this.prisma.finishing.create({\n                        data: {\n                            ...finish,\n                            quoteId: quote.id\n                        }\n                    });\n                }\n                console.log('Finishing created successfully');\n            }\n            // Create amounts if provided\n            if (amounts) {\n                console.log('Creating amounts for quote');\n                await this.prisma.quoteAmount.create({\n                    data: {\n                        ...amounts,\n                        quoteId: quote.id\n                    }\n                });\n                console.log('Amounts created successfully');\n            }\n            // Create operational data if provided\n            if (operational) {\n                console.log('Creating operational data for quote');\n                await this.prisma.quoteOperational.create({\n                    data: {\n                        id: quote.id,\n                        plates: operational.plates || 0,\n                        units: operational.units || 0,\n                        quoteId: quote.id,\n                        updatedAt: new Date()\n                    }\n                });\n                console.log('Operational data created successfully');\n            }\n            // Fetch the complete quote with all relations\n            const completeQuote = await this.prisma.quote.findUnique({\n                where: {\n                    id: quote.id\n                },\n                include: {\n                    client: true,\n                    user: true,\n                    papers: true,\n                    finishing: true,\n                    amounts: true,\n                    QuoteOperational: true\n                }\n            });\n            console.log('Quote creation completed successfully with all relations');\n            return completeQuote;\n        } catch (error) {\n            console.error('Error creating quote:', error);\n            throw error;\n        }\n    }\n    async updateQuote(id, data) {\n        try {\n            // Validate userId if provided\n            if (data.userId) {\n                try {\n                    const userExists = await this.prisma.user.findUnique({\n                        where: {\n                            id: data.userId\n                        }\n                    });\n                    if (!userExists) {\n                        console.log(`Invalid userId: ${data.userId}, removing it`);\n                        delete data.userId;\n                    }\n                } catch (error) {\n                    console.log(`Error validating userId: ${data.userId}, removing it`);\n                    delete data.userId;\n                }\n            }\n            return await this.prisma.quote.update({\n                where: {\n                    id\n                },\n                data,\n                include: {\n                    client: true,\n                    user: true\n                }\n            });\n        } catch (error) {\n            console.error('Error updating quote:', error);\n            throw error;\n        }\n    }\n    async updateQuoteStatus(id, status) {\n        try {\n            return await this.prisma.quote.update({\n                where: {\n                    id\n                },\n                data: {\n                    status,\n                    updatedAt: new Date()\n                },\n                include: {\n                    client: true,\n                    user: true\n                }\n            });\n        } catch (error) {\n            console.error('Error updating quote status:', error);\n            throw error;\n        }\n    }\n    async updateQuoteWithDetails(id, data) {\n        try {\n            // Extract related data\n            const { amounts, papers, finishing, operational, ...quoteData } = data;\n            // Validate userId if provided\n            if (quoteData.userId) {\n                try {\n                    const userExists = await this.prisma.user.findUnique({\n                        where: {\n                            id: quoteData.userId\n                        }\n                    });\n                    if (!userExists) {\n                        console.log(`Invalid userId: ${quoteData.userId}, removing it`);\n                        delete quoteData.userId;\n                    }\n                } catch (error) {\n                    console.log(`Error validating userId: ${quoteData.userId}, removing it`);\n                    delete quoteData.userId;\n                }\n            }\n            // Start a transaction\n            const result = await this.prisma.$transaction(async (tx)=>{\n                // Update the main quote\n                const updatedQuote = await tx.quote.update({\n                    where: {\n                        id\n                    },\n                    data: {\n                        ...quoteData,\n                        updatedAt: new Date()\n                    }\n                });\n                // Update amounts if provided\n                if (amounts) {\n                    // Check if amounts exist\n                    const existingAmounts = await tx.quoteAmount.findMany({\n                        where: {\n                            quoteId: id\n                        }\n                    });\n                    if (existingAmounts.length > 0) {\n                        // Update existing amounts\n                        for (const amount of existingAmounts){\n                            await tx.quoteAmount.update({\n                                where: {\n                                    id: amount.id\n                                },\n                                data: {\n                                    base: amounts.base || 0,\n                                    vat: amounts.vat || 0,\n                                    total: amounts.total || 0\n                                }\n                            });\n                        }\n                    } else {\n                        // Create new amounts\n                        await tx.quoteAmount.create({\n                            data: {\n                                quoteId: id,\n                                base: amounts.base || 0,\n                                vat: amounts.vat || 0,\n                                total: amounts.total || 0\n                            }\n                        });\n                    }\n                }\n                // Update papers if provided\n                if (papers && Array.isArray(papers)) {\n                    // Delete existing papers\n                    await tx.paper.deleteMany({\n                        where: {\n                            quoteId: id\n                        }\n                    });\n                    // Create new papers\n                    for (const paper of papers){\n                        await tx.paper.create({\n                            data: {\n                                quoteId: id,\n                                name: paper.name || \"Standard Paper\",\n                                gsm: paper.gsm ? Number(paper.gsm) : 150,\n                                inputWidth: paper.inputWidth ? Number(paper.inputWidth) : null,\n                                inputHeight: paper.inputHeight ? Number(paper.inputHeight) : null,\n                                pricePerPacket: paper.pricePerPacket ? Number(paper.pricePerPacket) : null,\n                                pricePerSheet: paper.pricePerSheet ? Number(paper.pricePerSheet) : null,\n                                sheetsPerPacket: paper.sheetsPerPacket ? Number(paper.sheetsPerPacket) : null,\n                                recommendedSheets: paper.recommendedSheets ? Number(paper.recommendedSheets) : null,\n                                enteredSheets: paper.enteredSheets ? Number(paper.enteredSheets) : null,\n                                outputWidth: paper.outputWidth ? Number(paper.outputWidth) : null,\n                                outputHeight: paper.outputHeight ? Number(paper.outputHeight) : null,\n                                selectedColors: paper.selectedColors ? String(paper.selectedColors) : null\n                            }\n                        });\n                    }\n                }\n                // Update finishing if provided\n                if (finishing && Array.isArray(finishing)) {\n                    // Delete existing finishing\n                    await tx.finishing.deleteMany({\n                        where: {\n                            quoteId: id\n                        }\n                    });\n                    // Create new finishing\n                    for (const finish of finishing){\n                        await tx.finishing.create({\n                            data: {\n                                quoteId: id,\n                                name: finish.name || \"Standard Finishing\",\n                                cost: finish.cost ? Number(finish.cost) : 0\n                            }\n                        });\n                    }\n                }\n                // Return the updated quote\n                return updatedQuote;\n            });\n            // Fetch the complete quote with relations after transaction\n            return await this.prisma.quote.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    client: true,\n                    user: true,\n                    amounts: true,\n                    papers: true,\n                    finishing: true\n                }\n            });\n        } catch (error) {\n            console.error('Error updating quote with details:', error);\n            throw error;\n        }\n    }\n    async deleteQuote(id) {\n        try {\n            return await this.prisma.quote.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting quote:', error);\n            throw error;\n        }\n    }\n    // ===== SUPPLIER OPERATIONS =====\n    async getAllSuppliers() {\n        try {\n            return await this.prisma.supplier.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching suppliers:', error);\n            throw error;\n        }\n    }\n    async getSupplierById(id) {\n        try {\n            return await this.prisma.supplier.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    materials: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching supplier by ID:', error);\n            throw error;\n        }\n    }\n    async createSupplier(supplierData) {\n        try {\n            return await this.prisma.supplier.create({\n                data: supplierData\n            });\n        } catch (error) {\n            console.error('Error creating supplier:', error);\n            throw error;\n        }\n    }\n    async updateSupplier(id, data) {\n        try {\n            return await this.prisma.supplier.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating supplier:', error);\n            throw error;\n        }\n    }\n    async deleteSupplier(id) {\n        try {\n            return await this.prisma.supplier.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting supplier:', error);\n            throw error;\n        }\n    }\n    // ===== MATERIAL OPERATIONS =====\n    async getAllMaterials() {\n        try {\n            return await this.prisma.material.findMany({\n                orderBy: {\n                    createdAt: 'desc'\n                },\n                include: {\n                    supplier: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching materials:', error);\n            throw error;\n        }\n    }\n    async getMaterialById(id) {\n        try {\n            return await this.prisma.material.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    supplier: true\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching material by ID:', error);\n            throw error;\n        }\n    }\n    async createMaterial(materialData) {\n        try {\n            return await this.prisma.material.create({\n                data: materialData\n            });\n        } catch (error) {\n            console.error('Error creating material:', error);\n            throw error;\n        }\n    }\n    async updateMaterial(id, data) {\n        try {\n            return await this.prisma.material.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating material:', error);\n            throw error;\n        }\n    }\n    async deleteMaterial(id) {\n        try {\n            return await this.prisma.material.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting material:', error);\n            throw error;\n        }\n    }\n    // ===== QUOTE AMOUNT OPERATIONS =====\n    async createQuoteAmount(amountData) {\n        try {\n            return await this.prisma.quoteAmount.create({\n                data: amountData\n            });\n        } catch (error) {\n            console.error('Error creating quote amount:', error);\n            throw error;\n        }\n    }\n    async updateQuoteAmount(id, data) {\n        try {\n            return await this.prisma.quoteAmount.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating quote amount:', error);\n            throw error;\n        }\n    }\n    async deleteQuoteAmount(id) {\n        try {\n            return await this.prisma.quoteAmount.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting quote amount:', error);\n            throw error;\n        }\n    }\n    // ===== QUOTE OPERATIONAL OPERATIONS =====\n    async createQuoteOperational(operationalData) {\n        try {\n            return await this.prisma.quoteOperational.create({\n                data: operationalData\n            });\n        } catch (error) {\n            console.error('Error creating quote operational:', error);\n            throw error;\n        }\n    }\n    async updateQuoteOperational(id, data) {\n        try {\n            return await this.prisma.quoteOperational.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating quote operational:', error);\n            throw error;\n        }\n    }\n    async deleteQuoteOperational(id) {\n        try {\n            return await this.prisma.quoteOperational.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting quote operational:', error);\n            throw error;\n        }\n    }\n    // ===== PAPER OPERATIONS =====\n    async createPaper(paperData) {\n        try {\n            return await this.prisma.paper.create({\n                data: paperData\n            });\n        } catch (error) {\n            console.error('Error creating paper:', error);\n            throw error;\n        }\n    }\n    async updatePaper(id, data) {\n        try {\n            return await this.prisma.paper.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating paper:', error);\n            throw error;\n        }\n    }\n    async deletePaper(id) {\n        try {\n            return await this.prisma.paper.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting paper:', error);\n            throw error;\n        }\n    }\n    // ===== FINISHING OPERATIONS =====\n    async createFinishing(finishingData) {\n        try {\n            return await this.prisma.finishing.create({\n                data: finishingData\n            });\n        } catch (error) {\n            console.error('Error creating finishing:', error);\n            throw error;\n        }\n    }\n    async updateFinishing(id, data) {\n        try {\n            return await this.prisma.finishing.update({\n                where: {\n                    id\n                },\n                data\n            });\n        } catch (error) {\n            console.error('Error updating finishing:', error);\n            throw error;\n        }\n    }\n    async deleteFinishing(id) {\n        try {\n            return await this.prisma.finishing.delete({\n                where: {\n                    id\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting finishing:', error);\n            throw error;\n        }\n    }\n}\n// Database connection health check\nasync function checkDatabaseConnection() {\n    if (!process.env.DATABASE_URL) {\n        return {\n            status: 'failed',\n            error: 'DATABASE_URL not configured',\n            timestamp: new Date().toISOString()\n        };\n    }\n    try {\n        await prisma.$queryRaw`SELECT 1`;\n        return {\n            status: 'connected',\n            timestamp: new Date().toISOString(),\n            database: 'Vercel PostgreSQL'\n        };\n    } catch (error) {\n        console.error('Database connection failed:', error);\n        return {\n            status: 'failed',\n            error: error instanceof Error ? error.message : 'Unknown error',\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n// Graceful shutdown\nasync function closeDatabaseConnection() {\n    if (prisma) {\n        try {\n            await prisma.$disconnect();\n            console.log('Database connection closed gracefully');\n        } catch (error) {\n            console.error('Error closing database connection:', error);\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database-production.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fusers%2Froute&page=%2Fapi%2Fusers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fusers%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fusers%2Froute&page=%2Fapi%2Fusers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fusers%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_Alifka_Roosseo_Desktop_Project_Smart_printing_update_app_api_users_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/users/route.ts */ \"(rsc)/./app/api/users/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/users/route\",\n        pathname: \"/api/users\",\n        filename: \"route\",\n        bundlePath: \"app/api/users/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/Alifka_Roosseo/Desktop/Project/Smart-printing-update/app/api/users/route.ts\",\n    nextConfigOutput,\n    userland: _Users_Alifka_Roosseo_Desktop_Project_Smart_printing_update_app_api_users_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/users/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fusers%2Froute&page=%2Fapi%2Fusers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fusers%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fusers%2Froute&page=%2Fapi%2Fusers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fusers%2Froute.ts&appDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FAlifka_Roosseo%2FDesktop%2FProject%2FSmart-printing-update&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();