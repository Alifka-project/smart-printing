"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(root)/create-quote/page",{

/***/ "(app-pages-browser)/./lib/excel-calculation.ts":
/*!**********************************!*\
  !*** ./lib/excel-calculation.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXCEL_DIGITAL_CONSTANTS: () => (/* binding */ EXCEL_DIGITAL_CONSTANTS),\n/* harmony export */   EXCEL_OFFSET_CONSTANTS: () => (/* binding */ EXCEL_OFFSET_CONSTANTS),\n/* harmony export */   calculatePerClick: () => (/* binding */ calculatePerClick),\n/* harmony export */   excelDigitalCalculation: () => (/* binding */ excelDigitalCalculation),\n/* harmony export */   excelOffsetCalculation: () => (/* binding */ excelOffsetCalculation),\n/* harmony export */   validateCalculationAlignment: () => (/* binding */ validateCalculationAlignment),\n/* harmony export */   validateExcelFormulas: () => (/* binding */ validateExcelFormulas),\n/* harmony export */   validatePricingConstants: () => (/* binding */ validatePricingConstants)\n/* harmony export */ });\n// Define types locally since types module might not be available\n// === Excel Calculation Constants (from Excel analysis) ===\nconst EXCEL_DIGITAL_CONSTANTS = {\n    parentSheetCost: 1.00,\n    wasteParents: 3 // Fixed waste sheets (from Excel)\n};\n// === Dynamic Per-Click Calculation (Excel Formula) ===\n// Formula: =IF([@Sheets]*[@[Cut pcs]]>200,IF($L$2=4,1.25,0.5),IF($L$2=4,1.5,0.75)) * multiplier\n// Note: $L$2 refers to colors, not sides\n// Multiplier: 1 for cutPcs=4, 2 for cutPcs=3\n// Color categorization: 1-3 colors = 1 color, 4+ colors = 4 colors\nfunction calculatePerClick(sheets, cutPcs, colorsF) {\n    const totalSheets = sheets * cutPcs;\n    // Categorize colors: 1-3 colors = 1 color, 4+ colors = 4 colors\n    const categorizedColors = colorsF <= 3 ? 1 : 4;\n    // Base per-click rate\n    let basePerClick;\n    if (totalSheets > 200) {\n        // High volume: > 200 total sheets\n        basePerClick = categorizedColors === 4 ? 1.25 : 0.5;\n    } else {\n        // Low volume: ≤ 200 total sheets  \n        basePerClick = categorizedColors === 4 ? 1.5 : 0.75;\n    }\n    // Apply dynamic multiplier based on cut pieces (original formula)\n    // Multiplier = (4 - cutPcs + 1)\n    const multiplier = 4 - cutPcs + 1;\n    return basePerClick * multiplier;\n}\nconst EXCEL_OFFSET_CONSTANTS = {\n    parentCost: 8.00,\n    plateCost: 120.00,\n    makeReadySetup: 200.00,\n    makeReadySheets: 10,\n    runPer1000: 60.00,\n    cutOpRate: 8.00 // AED per cut operation (from Excel)\n};\n// === Excel Digital Calculation (Exact Excel Formulas) ===\nfunction excelDigitalCalculation(param) {\n    let { qty, piece, sides, colorsF, colorsB, parent = {\n        w: 100,\n        h: 70\n    }, allowRotate = true, paperCostPerSheet// Optional manual paper pricing override\n     } = param;\n    const colors = colorsF + (sides === 2 ? colorsB !== null && colorsB !== void 0 ? colorsB : 0 : 0);\n    // Excel Formula: ROUNDDOWN((Sheet Width) / (height + 1), 0) × ROUNDDOWN((Sheet Height) / (width + 1), 0)\n    const calculateUpsOption1 = (sheetW, sheetH, pieceW, pieceH)=>{\n        const cols = Math.floor(sheetW / (pieceW + 1));\n        const rows = Math.floor(sheetH / (pieceH + 1));\n        return cols * rows;\n    };\n    // Excel Formula: ROUNDDOWN((Sheet Width) / (width + 1), 0) × ROUNDDOWN((Sheet Height) / (height + 1), 0)\n    const calculateUpsOption2 = (sheetW, sheetH, pieceW, pieceH)=>{\n        const cols = Math.floor(sheetW / (pieceH + 1));\n        const rows = Math.floor(sheetH / (pieceW + 1));\n        return cols * rows;\n    };\n    // Excel Formula: IF(Option 1 > Option 2, Option 1, Option 2)\n    const getBestUps = (option1, option2)=>{\n        return Math.max(option1, option2);\n    };\n    // Excel Formula: ROUNDUP(Quantity / ups per sheet + Waste Sheets, 0)\n    const calculateSheets = (quantity, upsPerSheet)=>{\n        if (upsPerSheet === 0) return 0;\n        return Math.ceil(quantity / upsPerSheet + EXCEL_DIGITAL_CONSTANTS.wasteParents);\n    };\n    // Excel Formula: Sheets × Cut pieces × Per click × Sides (price calculation)\n    const calculatePrice = (sheets, cutPieces, colorsF, sides)=>{\n        const perClickRate = calculatePerClick(sheets, cutPieces, colorsF);\n        return sheets * cutPieces * perClickRate * sides;\n    };\n    // Calculate for different sheet sizes (matching Excel options)\n    const sheetOptions = [\n        {\n            w: 48,\n            h: 33,\n            label: \"48×33 cm\",\n            cutPcs: 4\n        },\n        {\n            w: 70,\n            h: 33,\n            label: \"70×33 cm\",\n            cutPcs: 3\n        }\n    ];\n    return sheetOptions.map((option)=>{\n        // Calculate UPS for both orientations\n        const upsOption1 = calculateUpsOption1(option.w, option.h, piece.w, piece.h);\n        const upsOption2 = allowRotate ? calculateUpsOption2(option.w, option.h, piece.w, piece.h) : 0;\n        // Get best UPS per cut piece (Excel formula)\n        const upsPerCutPiece = getBestUps(upsOption1, upsOption2);\n        if (upsPerCutPiece === 0) return null;\n        // Calculate total ups per sheet = cut pieces × ups per cut piece\n        const totalUpsPerSheet = option.cutPcs * upsPerCutPiece;\n        // Calculate sheets needed (Excel formula)\n        const sheets = calculateSheets(qty, totalUpsPerSheet);\n        // Calculate costs (no units calculation for digital)\n        // Use manual paper pricing if provided, otherwise use default constant\n        const effectivePaperCost = paperCostPerSheet !== undefined && paperCostPerSheet !== null ? paperCostPerSheet : EXCEL_DIGITAL_CONSTANTS.parentSheetCost;\n        const paper = sheets * effectivePaperCost;\n        const price = calculatePrice(sheets, option.cutPcs, colorsF, sides);\n        const total = price + paper;\n        return {\n            option: option.label,\n            cutPerParent: option.cutPcs,\n            upsPerSheet: totalUpsPerSheet,\n            upsPerParent: totalUpsPerSheet,\n            parents: sheets,\n            paper,\n            clicks: price,\n            total\n        };\n    }).filter(Boolean);\n}\n// === Excel Offset Calculation (Exact Excel Formulas) ===\nfunction excelOffsetCalculation(param) {\n    let { qty, piece, sides, colorsF, colorsB, parent = {\n        w: 100,\n        h: 70\n    }, allowRotate = true } = param;\n    const colors = colorsF + (sides === 2 ? colorsB !== null && colorsB !== void 0 ? colorsB : 0 : 0);\n    // Excel Formula: ROUNDDOWN((Sheet Width) / (height + 1), 0) × ROUNDDOWN((Sheet Height) / (width + 1), 0)\n    const calculateUpsOption1 = (sheetW, sheetH, pieceW, pieceH)=>{\n        const cols = Math.floor(sheetW / (pieceW + 1));\n        const rows = Math.floor(sheetH / (pieceH + 1));\n        return cols * rows;\n    };\n    // Excel Formula: ROUNDDOWN((Sheet Width) / (width + 1), 0) × ROUNDDOWN((Sheet Height) / (height + 1), 0)\n    const calculateUpsOption2 = (sheetW, sheetH, pieceW, pieceH)=>{\n        const cols = Math.floor(sheetW / (pieceH + 1));\n        const rows = Math.floor(sheetH / (pieceW + 1));\n        return cols * rows;\n    };\n    // Excel Formula: IF(Option 1 > Option 2, Option 1, Option 2)\n    const getBestUps = (option1, option2)=>{\n        return Math.max(option1, option2);\n    };\n    // Excel Formula: ROUNDUP(IF(Sheet Width > 50, 120/Cut pieces, 100/Cut pieces), 0)\n    const calculateWasteSheets = (sheetW, cutPieces)=>{\n        const wasteBase = sheetW > 50 ? 120 : 100;\n        return Math.ceil(wasteBase / cutPieces);\n    };\n    // Excel Formula: ROUNDUP(Quantity / ups per sheet + Waste Sheets, 0)\n    const calculateSheets = (quantity, upsPerSheet, wasteSheets)=>{\n        if (upsPerSheet === 0) return 0;\n        return Math.ceil(quantity / upsPerSheet + wasteSheets);\n    };\n    // Excel Formula: IF(Sheets = 0, 0, unit price + paper cost + Plate cost × 2)\n    const calculatePlateCost = (sheets, unitPrice, paperCost, plateCost)=>{\n        if (sheets === 0) return 0;\n        return unitPrice + paperCost + plateCost * 2;\n    };\n    // Use standard press size (35×50 cm) for offset calculations\n    const press = {\n        w: 35,\n        h: 50\n    };\n    // Calculate UPS for both orientations\n    const upsOption1 = calculateUpsOption1(press.w, press.h, piece.w, piece.h);\n    const upsOption2 = allowRotate ? calculateUpsOption2(press.w, press.h, piece.w, piece.h) : 0;\n    // Get best UPS (Excel formula)\n    const bestUps = getBestUps(upsOption1, upsOption2);\n    if (bestUps === 0) {\n        throw new Error(\"Press size not cuttable from parent.\");\n    }\n    // Calculate waste sheets (Excel formula)\n    const wasteSheets = calculateWasteSheets(press.w, bestUps);\n    // Calculate sheets needed (Excel formula)\n    const pressSheets = calculateSheets(qty, bestUps, wasteSheets);\n    // Calculate press per parent\n    const pressPerParent = Math.floor(parent.w / press.w) * Math.floor(parent.h / press.h);\n    const parents = Math.ceil(pressSheets / pressPerParent);\n    // Calculate costs\n    const plates = colors;\n    const paper = parents * EXCEL_OFFSET_CONSTANTS.parentCost;\n    const platesC = plates * EXCEL_OFFSET_CONSTANTS.plateCost;\n    const mkready = EXCEL_OFFSET_CONSTANTS.makeReadySetup + EXCEL_OFFSET_CONSTANTS.makeReadySheets * (EXCEL_OFFSET_CONSTANTS.parentCost / pressPerParent);\n    const run = pressSheets * sides * (EXCEL_OFFSET_CONSTANTS.runPer1000 / 1000);\n    // Calculate cutting operations\n    const cols = Math.floor(press.w / (piece.w + 1));\n    const rows = Math.floor(press.h / (piece.h + 1));\n    const cutOps = cols && rows ? 4 + (cols - 1) + cols * (rows - 1) : 0;\n    const cutting = cutOps * EXCEL_OFFSET_CONSTANTS.cutOpRate * pressSheets;\n    const total = paper + platesC + mkready + run + cutting;\n    return {\n        pressPerParent,\n        upsPerPress: bestUps,\n        pressSheets,\n        parents,\n        plates,\n        paper,\n        platesC,\n        mkready,\n        run,\n        cutting,\n        total\n    };\n}\n// === Excel Formula Validation ===\nfunction validateExcelFormulas() {\n    console.log('🔍 Validating Excel Formulas...');\n    // Test Digital Calculation\n    const digitalTest = excelDigitalCalculation({\n        qty: 1000,\n        piece: {\n            w: 5.5,\n            h: 9\n        },\n        sides: 2,\n        colorsF: 4\n    });\n    console.log('📱 Digital Test Results:', digitalTest);\n    // Test Offset Calculation\n    const offsetTest = excelOffsetCalculation({\n        qty: 3000,\n        piece: {\n            w: 21,\n            h: 29\n        },\n        sides: 2,\n        colorsF: 2\n    });\n    console.log('🖨️ Offset Test Results:', offsetTest);\n    // Validate constants alignment\n    const constantsValidation = validatePricingConstants(EXCEL_DIGITAL_CONSTANTS, EXCEL_OFFSET_CONSTANTS);\n    if (constantsValidation.isValid) {\n        console.log('✅ Excel Constants Validation: PASSED');\n    } else {\n        console.warn('⚠️ Excel Constants Validation: FAILED', constantsValidation.errors);\n    }\n    return {\n        digitalTest,\n        offsetTest,\n        constantsValidation\n    };\n}\n// === Calculation Alignment Validation ===\nfunction validateCalculationAlignment(codeResult, excelResult) {\n    let tolerance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.01;\n    const difference = Math.abs(codeResult - excelResult);\n    const isAligned = difference <= tolerance;\n    if (!isAligned) {\n        console.warn(\"⚠️ Calculation misalignment detected:\", {\n            codeResult,\n            excelResult,\n            difference,\n            tolerance\n        });\n    }\n    return isAligned;\n}\n// === Pricing Constants Validation ===\nfunction validatePricingConstants(digitalPricing, offsetPricing) {\n    const errors = [];\n    // Validate Digital Pricing (perClick is now calculated dynamically)\n    // Note: perClick validation removed as it's now calculated dynamically\n    if (digitalPricing.parentSheetCost !== EXCEL_DIGITAL_CONSTANTS.parentSheetCost) {\n        errors.push(\"Digital parentSheetCost mismatch: \".concat(digitalPricing.parentSheetCost, \" vs \").concat(EXCEL_DIGITAL_CONSTANTS.parentSheetCost));\n    }\n    if (digitalPricing.wasteParents !== EXCEL_DIGITAL_CONSTANTS.wasteParents) {\n        errors.push(\"Digital wasteParents mismatch: \".concat(digitalPricing.wasteParents, \" vs \").concat(EXCEL_DIGITAL_CONSTANTS.wasteParents));\n    }\n    // Validate Offset Pricing\n    if (offsetPricing.parentCost !== EXCEL_OFFSET_CONSTANTS.parentCost) {\n        errors.push(\"Offset parentCost mismatch: \".concat(offsetPricing.parentCost, \" vs \").concat(EXCEL_OFFSET_CONSTANTS.parentCost));\n    }\n    if (offsetPricing.plateCost !== EXCEL_OFFSET_CONSTANTS.plateCost) {\n        errors.push(\"Offset plateCost mismatch: \".concat(offsetPricing.plateCost, \" vs \").concat(EXCEL_OFFSET_CONSTANTS.plateCost));\n    }\n    if (offsetPricing.makeReadySetup !== EXCEL_OFFSET_CONSTANTS.makeReadySetup) {\n        errors.push(\"Offset makeReadySetup mismatch: \".concat(offsetPricing.makeReadySetup, \" vs \").concat(EXCEL_OFFSET_CONSTANTS.makeReadySetup));\n    }\n    if (offsetPricing.runPer1000 !== EXCEL_OFFSET_CONSTANTS.runPer1000) {\n        errors.push(\"Offset runPer1000 mismatch: \".concat(offsetPricing.runPer1000, \" vs \").concat(EXCEL_OFFSET_CONSTANTS.runPer1000));\n    }\n    if (offsetPricing.cutOpRate !== EXCEL_OFFSET_CONSTANTS.cutOpRate) {\n        errors.push(\"Offset cutOpRate mismatch: \".concat(offsetPricing.cutOpRate, \" vs \").concat(EXCEL_OFFSET_CONSTANTS.cutOpRate));\n    }\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/excel-calculation.ts\n"));

/***/ })

});