// Temporary SQLite schema to read local data
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String
  role           String   @default("user")
  password       String?
  profilePicture String?
  status         String   @default("Active")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  quotes         Quote[]
  clients        Client[]
  searchHistory  SearchHistory[]
  searchAnalytics SearchAnalytics[]
}

model Client {
  id           String   @id @default(cuid())
  clientType   String
  companyName  String?
  contactPerson String
  email        String
  phone        String
  countryCode  String
  role         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  quotes       Quote[]
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
}

model Quote {
  id         String      @id @default(cuid())
  quoteId    String      @unique
  date       DateTime
  status     String      @default("Pending")
  clientId   String
  client     Client      @relation(fields: [clientId], references: [id])
  userId     String?
  user       User?       @relation(fields: [userId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  product    String
  quantity   Int
  sides      String
  printing   String
  papers     Paper[]
  finishing  Finishing[]
  amounts    QuoteAmount?
}

model Paper {
  id       String @id @default(cuid())
  name     String
  gsm      String
  quoteId  String
  quote    Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model Finishing {
  id       String @id @default(cuid())
  name     String
  quoteId  String
  quote    Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model QuoteAmount {
  id       String @id @default(cuid())
  base     Float
  vat      Float
  total    Float
  quoteId  String @unique
  quote    Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model SearchAnalytics {
  id        String   @id @default(cuid())
  query     String
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contact     String?
  email       String?
  phone       String?
  countryCode String?  @default("+971")
  address     String?
  city        String?
  state       String?
  postalCode  String?
  country     String?  @default("UAE")
  status      String   @default("Active")
  materials   Material[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Material {
  id          String   @id @default(cuid())
  materialId  String   @unique
  name        String
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  cost        Float
  unit        String
  status      String   @default("Active")
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
