// Dual Environment Schema - Works both locally and on Vercel
// Local: Uses SQLite from .env
// Vercel: Uses PostgreSQL from .env.production.local

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String
  role            String            @default("user")
  password        String?
  profilePicture  String?
  status          String            @default("Active")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  clients         Client[]
  quotes          Quote[]
  searchAnalytics SearchAnalytics[]
  searchHistory   SearchHistory[]
}

model Client {
  id            String   @id @default(cuid())
  clientType    String
  companyName   String?
  contactPerson String
  email         String
  phone         String
  countryCode   String
  role          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  quotes        Quote[]
}

model Quote {
  id         String      @id @default(cuid())
  quoteId    String      @unique
  date       DateTime
  status     String      @default("Pending")
  clientId   String
  client     Client      @relation(fields: [clientId], references: [id])
  userId     String?
  user       User?       @relation(fields: [userId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  product    String
  quantity   Int
  sides      String
  printing   String
  papers     Paper[]
  finishing  Finishing[]
  amounts    QuoteAmount?
}

model Paper {
  id       String @id @default(cuid())
  name     String
  gsm      String
  quoteId  String
  quote    Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model Finishing {
  id       String @id @default(cuid())
  name     String
  quoteId  String
  quote    Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model QuoteAmount {
  id       String @id @default(cuid())
  base     Float
  vat      Float
  total    Float
  quoteId  String @unique
  quote    Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model SearchAnalytics {
  id        String   @id @default(cuid())
  query     String
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}
